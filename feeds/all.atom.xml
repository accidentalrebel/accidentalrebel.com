<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>AccidentalRebel.com</title><link href="http://www.accidentalrebel.com/" rel="alternate"></link><link href="http://www.accidentalrebel.com/feeds/all.atom.xml" rel="self"></link><id>http://www.accidentalrebel.com/</id><updated>2021-10-30T12:00:00+08:00</updated><entry><title>Cyber Corp Case 2 Writeup - Part 1</title><link href="http://www.accidentalrebel.com/threat-hunting-from-home-cyber-corp-wmi-persistence.html" rel="alternate"></link><published>2021-10-30T12:00:00+08:00</published><updated>2021-10-30T12:00:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-10-30:/threat-hunting-from-home-cyber-corp-wmi-persistence.html</id><content type="html">&lt;p&gt;The &lt;a href="https://cyberdefenders.org/labs/75"&gt;second case of the CyberCorp challenge&lt;/a&gt; on &lt;a href="https://cyberdefenders.org/labs/75"&gt;CyberDefenders.org&lt;/a&gt; is all about threat hunting. Created by &lt;a href="https://twitter.com/BlackMatter23"&gt;@BlackMatter23&lt;/a&gt; and his team, this challenge is based on a real-world attack so it is perfect for gaining practical experience on threat hunting.&lt;/p&gt;
&lt;p&gt;This writeup is part one out of multiple parts as I will be detailing my thought process and the steps I took for each question.&lt;/p&gt;
&lt;h2 id="understanding-wmi-persistence"&gt;Understanding WMI Persistence&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Quesiton 1. The Threat Hunting process usually starts with the analyst making a hypothesis about a possible compromise vector or techniques used by an attacker. In this scenario, your initial hypothesis is as follows: "The attacker used the WMI subscription mechanism to obtain persistence within the infrastructure". Verify this hypothesis and find the name of the WMI Event Consumer used by the attacker to maintain his foothold.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the question tells us that the attacker used WMI subscription to gain persistence in our network.&lt;/p&gt;
&lt;p&gt;The very first thing I did was to check the Mitre ATT&amp;amp;CK wiki for information about this attack. My search led me to the "&lt;a href="https://attack.mitre.org/techniques/T1546/003/"&gt;Event Triggered Execution: Windows Management Instrumentation Event Subscription&lt;/a&gt;" with technique ID &lt;code&gt;T1546.003&lt;/code&gt;. And, of course, I fired up &lt;a href="https://github.com/accidentalrebel/vATTACK"&gt;my vATT&amp;amp;CK tool&lt;/a&gt; to better visualize the technique and it's related information.&lt;/p&gt;
&lt;p&gt;&lt;img alt="cyber-corp-case-2-writeup-01" src="http://www.accidentalrebel.com/images/cyber-corp-case-2-writeup-01.png" /&gt;&lt;/p&gt;
&lt;h2 id="testing-wmi-persistence-in-my-homelab"&gt;Testing WMI Persistence in my homelab&lt;/h2&gt;
&lt;p&gt;Now that I understand the concept I then checked &lt;a href="https://github.com/redcanaryco/atomic-red-team/blob/36d49de4c8b00bf36054294b4a1fcbab3917d7c5/atomics/T1546.003/T1546.003.md"&gt;the technique's entry&lt;/a&gt; in the Atomic Red Team's repository of adversary emulation techniques. The nice thing about Atomic Red Team is that they have easy-to-follow step-by-step instructions on how to emulate Mitre ATT&amp;amp;CK techniques.&lt;/p&gt;
&lt;p&gt;I took the code on the page and ran it in &lt;a href="building-my-virtual-cybersecurity-home-lab"&gt;my homelab&lt;/a&gt;. I then fired up Windows Event Viewer and looked for entries with event log ID "5681 (WMI activity)". The entry that I found contains the information below:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;Namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="n"&gt;Eventfilter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AtomicRedTeam&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;WMIPersistence&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;refer&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;its&lt;/span&gt; &lt;span class="n"&gt;activate&lt;/span&gt; &lt;span class="n"&gt;eventid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5859&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="n"&gt;Consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CommandLineEventConsumer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AtomicRedTeam-WMIPersistence-Example&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="n"&gt;PossibleCause&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Binding&lt;/span&gt; &lt;span class="n"&gt;EventFilter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;__EventFilter&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;CreatorSID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;158&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;195&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;131&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;242&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;184&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;137&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;245&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;134&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;EventNamespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;root\\CimV2&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;AtomicRedTeam-WMIPersistence-Example&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA &amp;#39;Win32_PerfFormattedData_PerfOS_System&amp;#39; AND TargetInstance.SystemUpTime &amp;gt;= 240 AND TargetInstance.SystemUpTime &amp;lt; 325&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;QueryLanguage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;WQL&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Perm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;CommandLineEventConsumer&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;CommandLineTemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C:\\Windows\\System32\\notepad.exe&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;CreatorSID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;158&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;195&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;131&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;242&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;184&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;137&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;245&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;134&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;AtomicRedTeam-WMIPersistence-Example&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since I have Sysmon logging enabled, I also double checked the logs using the Sysmon event ID's below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Event ID 19: WmiEvent (WmiEventFilter activity detected)&lt;/li&gt;
&lt;li&gt;Event ID 20: WmiEvent (WmiEventConsumer activity detected)&lt;/li&gt;
&lt;li&gt;Event ID 21: WmiEvent (WmiEventConsumerToFilter activity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="cyber-corp-case-2-writeup-02" src="http://www.accidentalrebel.com/images/cyber-corp-case-2-writeup-02.png" /&gt;&lt;/p&gt;
&lt;p&gt;As we can see, Sysmon separates the WMIEvents into the different types of WmiEvent activities.&lt;/p&gt;
&lt;h2 id="building-the-query-for-the-kibana-search"&gt;Building the Query for the Kibana search&lt;/h2&gt;
&lt;p&gt;Now that I know what the important IOCs are, I could now create the query to answer the first question of the challenge.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5861&lt;/li&gt;
&lt;li&gt;("QueryLanguage = " AND "Consumer = ")&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When the above information are combined, I get the query &lt;code&gt;5861 OR ("QueryLanguage = " AND "Consumer = ")&lt;/code&gt;. Putting this in the Kibana search shows us the one and only entry:&lt;/p&gt;
&lt;p&gt;&lt;img alt="cyber-corp-case-2-writeup-03" src="http://www.accidentalrebel.com/images/cyber-corp-case-2-writeup-03.png" /&gt;&lt;/p&gt;
&lt;p&gt;From there we could easily see the name of the WMI Event Consumer.&lt;/p&gt;
&lt;h2 id="looking-for-the-wmi-subscriber"&gt;Looking for the WMI subscriber&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Question 2. In the previous step, you looked for traces of the attacker's persistence in the compromised system through a WMI subscription mechanism. Now find the process that installed the WMI subscription. Answer the question by specifying the PID of that process and the name of its executable file, separated by a comma without spaces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Reading the question above, I knew that I needed to look for a process that has happened prior to the WMI subscription. And so, I've set the date range to reflect this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="cyber-corp-case-2-writeup-04" src="http://www.accidentalrebel.com/images/cyber-corp-case-2-writeup-04.png" /&gt;&lt;/p&gt;
&lt;p&gt;I wasn't so sure what to look for next so I just looked out for anything suspicious. Thankfully there is the &lt;code&gt;enrich.ioa.*&lt;/code&gt; set of fields where enrichment is done that indicate suspiciousness. I've set a filter to show entries that have &lt;code&gt;enrich.ioa.max_severity&lt;/code&gt; to &lt;code&gt;exists&lt;/code&gt;. This means it'll only show events that are either &lt;code&gt;high&lt;/code&gt;, &lt;code&gt;medium&lt;/code&gt;, or &lt;code&gt;low&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These showed some very interesting events:&lt;/p&gt;
&lt;p&gt;&lt;img alt="cyber-corp-case-2-writeup-05" src="http://www.accidentalrebel.com/images/cyber-corp-case-2-writeup-05.png" /&gt;&lt;/p&gt;
&lt;p&gt;It seems like &lt;code&gt;winword.exe&lt;/code&gt; is connecting to an external IP. Very suspicious. Searching the IP &lt;code&gt;188.135.15.49&lt;/code&gt; on VirusTotal reveals that it is indeed malicious.&lt;/p&gt;
&lt;p&gt;&lt;img alt="cyber-corp-case-2-writeup-06" src="http://www.accidentalrebel.com/images/cyber-corp-case-2-writeup-06.png" /&gt;&lt;/p&gt;
&lt;p&gt;If we look at more of the events we will find that there are a lot of malicious activity with the &lt;code&gt;proc_cmdline&lt;/code&gt; that contains the value:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"C:\Program Files (x86)\Microsoft Office\Office16\WINWORD.EXE" /n "C:!Work\Marketing\Docs\OPEC\OPEC crude oil production.docx" /o ""&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Having seen all of that we can now safely assume that this is the process that we are looking for. Entering the &lt;code&gt;proc_id&lt;/code&gt; along with the proc's file name satisfies question number 2.&lt;/p&gt;
&lt;h2 id="looking-for-the-extracted-archive"&gt;Looking for the extracted archive&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Question 3. The process described in the previous question was used to open a file extracted from the archive that user received by email. Specify a SHA256 hash of the file extracted and opened from the archive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The question said something about a file being opened, and so I added the filters &lt;code&gt;event_type: FileOpen&lt;/code&gt; and &lt;code&gt;proc_file_path: C:\Program Files (x86)\Microsoft Office\Office16\WINWORD.EXE&lt;/code&gt; to see what files were opened using Word.exe prior to the WMI subscription. This however showed a lot of files.&lt;/p&gt;
&lt;p&gt;&lt;img alt="cyber-corp-case-2-writeup-07" src="http://www.accidentalrebel.com/images/cyber-corp-case-2-writeup-07.png" /&gt;&lt;/p&gt;
&lt;p&gt;The question also mentioned that the opened file was extracted from an archive received by email. So I added the query &lt;code&gt;*zip* OR *rar*&lt;/code&gt; to find outif there are any "zip" or "rar" files that were processed.&lt;/p&gt;
&lt;p&gt;Sure enough, there was, and one particular really stood out. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Process 'c:\program files (x86)\microsoft office\office16\outlook.exe' created file 'c:\users\john.goldberg\appdata\local\microsoft\windows\inetcache\content.outlook\dfn3sfep\report.zip'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This tells us that the archive &lt;code&gt;report.zip&lt;/code&gt; was opened via email using the program &lt;code&gt;outlook.exe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But what was the generated file when the archive was opened? Looking through the results we could also see one entry that had the &lt;code&gt;enrich.chain&lt;/code&gt; with the value of: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;'c:\windows\explorer.exe' ➔ 'c:\program files (x86)\microsoft office\office16\winword.exe' ➔ 'c:\users\john.goldberg\appdata\local\temp\temp1_report.zip\market forecast emea.docx'`. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;"Market forecaste emea.docx" was opened via "winword.exe" and we could also see that the temporary folder for it is &lt;code&gt;temp1_report.zip&lt;/code&gt;. Entering the hash for this "docx" file was the correct answer for this question.&lt;/p&gt;
&lt;h2 id="finding-the-actual-malicious-file"&gt;Finding the actual malicious file&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Question 4. The file mentioned in question 3, is not malicious in and of itself, but when it is opened, another file is downloaded from the Internet that already contains the malicious code. Answer the question by specifying the address, from which this file was downloaded, and the SHA256 hash of the downloaded file, separated by commas without spaces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we think about it, we can make the date range smaller by starting our range from when the Zip is extracted and from when the WMI subscription happened. &lt;/p&gt;
&lt;p&gt;&lt;img alt="cyber-corp-case-2-writeup-08" src="http://www.accidentalrebel.com/images/cyber-corp-case-2-writeup-08.png" /&gt;&lt;/p&gt;
&lt;p&gt;There are three "action" keywords specified in the question that I knew I could filter for. This led me to using the query below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;event_type:NetworkConnection OR event_type:FileOpen OR event_type:FileCreate&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What I'm looking for is an event where there is a "NetworkConnection" and a "FileCreate" event (these two signifies another file is downlaoded from the internet), the "FileOpen" is when the file has been opened and therefore triggered the WMI subscription.&lt;/p&gt;
&lt;p&gt;As you can see in the image below, we have a series of events that shows us the three events that we are looking for in the previous paragraph. But because their timestamps are the same, they are all jumbled.&lt;/p&gt;
&lt;p&gt;&lt;img alt="cyber-corp-case-2-writeup-09" src="http://www.accidentalrebel.com/images/cyber-corp-case-2-writeup-09.png" /&gt;&lt;/p&gt;
&lt;p&gt;The way to see if the events happened in the order that we want (Network Connection &amp;gt; FileCreate &amp;gt; FileOpen), then what we can do is to view the surrounding documents on one of the events and see from there. From the image below, we see that the ordering of the events is indeed correct.&lt;/p&gt;
&lt;p&gt;&lt;img alt="cyber-corp-case-2-writeup-10" src="http://www.accidentalrebel.com/images/cyber-corp-case-2-writeup-10.png" /&gt;&lt;/p&gt;
&lt;p&gt;The above tells us two of the answers that we need to answer the 4th question. The IP on the network connection and the hash of the file that was opened.&lt;/p&gt;
&lt;h2 id="finding-the-tricky-technique"&gt;Finding the tricky technique&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Question 5. The malicious code from the file, mentioned in question 4, directly installed a WMI subscription, which we started our hunting with, and also downloaded several files from the Internet to the compromised host. For file downloading, the attacker used a tricky technique that gave him the opportunity to hide the real process, which initiated the corresponding network activity. Specify the SHA256 hash of the operating system component whose functionality was used by the attacker to download files from the Internet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the event that the question is looking for happened after the WMI subscription. I've updated the date range to reflect this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="cyber-corp-case-2-writeup-part-1-11" src="http://www.accidentalrebel.com/images/cyber-corp-case-2-writeup-part-1-11.png" /&gt;&lt;/p&gt;
&lt;p&gt;Initially, I tried doing the same approach as I did before where I would pick up certain "action" keywords from the question. Something similar to the query below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(event_type:NetworkConnection OR event_type:FileCreate) AND enrich.ioa.max_severity:*&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sadly, no matter where I looked it doesn't seem to be what the question is looking for.&lt;/p&gt;
&lt;p&gt;And so, I had to start my search from scratch but this time only focusing on any entries after the WMI subscription that have an existing value in &lt;code&gt;enrich.ioa.max_severity&lt;/code&gt;. This approach worked and it showed me this very interesting entry marked as &lt;code&gt;win_unusual_ie_com_dll_host_process&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="cyber-corp-case-2-writeup-part-1-12" src="http://www.accidentalrebel.com/images/cyber-corp-case-2-writeup-part-1-12.png" /&gt;&lt;/p&gt;
&lt;p&gt;So apparently, "winword.exe" loaded the library "iexproxy.dll", which allowed it to use "iexplore.exe" in downloading several files from the internet. This technique is unfamiliar to me and researching about it only showed &lt;a href="https://cyberpolygon.com/materials/hunting-for-advanced-tactics-techniques-and-procedures-ttps/"&gt;an article from Cyber Polygon&lt;/a&gt;. I'll try to explore this in the future, but at least for now. I have the answer to the question.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This is part 1 for my writeup for this challenge. Expect the next part which would have the answer to question that a lot of people have difficulty answering, which is #9. Until then!&lt;/p&gt;</content><category term="threat-hunting"></category><category term="threat-hunting"></category><category term="cyberdefenders"></category></entry><entry><title>New Tool Preview: vATT&amp;CK</title><link href="http://www.accidentalrebel.com/new-tool-preview-vattack.html" rel="alternate"></link><published>2021-10-18T20:33:00+08:00</published><updated>2021-10-18T20:33:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-10-18:/new-tool-preview-vattack.html</id><content type="html">&lt;p&gt;I have released a new cybersecurity-related tool called &lt;a href="https://github.com/accidentalrebel/vATTACK"&gt;vATT&amp;amp;CK (Visual ATT&amp;amp;CK)&lt;/a&gt;. It is a relationship visualizer for the Mitre ATT&amp;amp;CK framework.&lt;/p&gt;
&lt;p&gt;&lt;img alt="new-tool-preview-vattack-01" src="http://www.accidentalrebel.com/images/new-tool-preview-vattack-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;What the tool does is that it makes a visual map of the searched technique and all the related information. You can watch a video of the tool in action &lt;a href="https://www.youtube.com/watch?v=xCc7aAqbSNI"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Each node will be colored depending on it's category. The color legends is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pink - Related subtechniques&lt;/li&gt;
&lt;li&gt;Orange - Malware that uses the searched technique&lt;/li&gt;
&lt;li&gt;Red - Groups that uses the searched technique&lt;/li&gt;
&lt;li&gt;Blue - Tools that use the searched technique&lt;/li&gt;
&lt;li&gt;Yellow - Mitigations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tool is still in development. I plan to add a number of improvements such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ability to click on nodes and then update the visual map&lt;/li&gt;
&lt;li&gt;Ability to search not just by technique, but also by other categories&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also plan on releasing a live demo of the tool very soon in the hopes of getting feedback from the community. &lt;/p&gt;
&lt;p&gt;For now, if you are interested in the project, you could visit the &lt;a href="https://github.com/accidentalrebel/vATTACK"&gt;tool's Github project page&lt;/a&gt; or contact me for any comments or suggestions.&lt;/p&gt;</content><category term="tools"></category><category term="tools"></category><category term="cybersecurity"></category></entry><entry><title>IOLI Crackme 0x04</title><link href="http://www.accidentalrebel.com/ioli-crackme-0x04.html" rel="alternate"></link><published>2021-09-29T10:34:00+08:00</published><updated>2021-09-29T10:34:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-09-29:/ioli-crackme-0x04.html</id><content type="html">&lt;p&gt;I am continuing my reverse engineering review by tackling the &lt;em&gt;IOLI crackmes&lt;/em&gt; by &lt;a href="https://twitter.com/pof"&gt;@pof&lt;/a&gt;. These are beginner friendly challenges that is perfect for newbies or for those who want to review the basics like me. Check out my writeups for &lt;a href="http://www.accidentalrebel.com/ioli-crackme-0x00.html"&gt;0x00&lt;/a&gt;, &lt;a href="http://www.accidentalrebel.com/ioli-crackme-0x01.html"&gt;0x01&lt;/a&gt;, &lt;a href="http://www.accidentalrebel.com/ioli-crackme-0x02.html"&gt;0x02&lt;/a&gt;, and &lt;a href="http://www.accidentalrebel.com/ioli-crackme-0x03.html"&gt;0x03&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="getting-the-password"&gt;Getting the password&lt;/h1&gt;
&lt;p&gt;Loading the program in IDA revealed something new. There is now a &lt;code&gt;_check&lt;/code&gt; function that when opened looks more complicated than the previous challenges.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x04-01" src="http://www.accidentalrebel.com/images/ioli-crackme-0x04-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;The one thing that I immediately noticed is the call to the &lt;code&gt;_strlen&lt;/code&gt; function similar to the previous challenge. This means that the length of the input string plays another important role.&lt;/p&gt;
&lt;p&gt;One curious thing is the condition that leads to the "Password Incorrect" block, as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x04-02" src="http://www.accidentalrebel.com/images/ioli-crackme-0x04-02.png" /&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="no"&gt;_strlen&lt;/span&gt;
&lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;ebp&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="no"&gt;var_C&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="no"&gt;eax&lt;/span&gt;
&lt;span class="nf"&gt;jnb&lt;/span&gt; &lt;span class="no"&gt;short&lt;/span&gt; &lt;span class="no"&gt;loc_401387&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From the looks of it, the check will fail if &lt;code&gt;var_C&lt;/code&gt; (Which is our &lt;code&gt;var_counter&lt;/code&gt; from the previous challenge) reaches the length of the entered string. If you think about it, this means that it doesn't matter how long the string that the user inputs. What's important is the content.&lt;/p&gt;
&lt;p&gt;To find out what the correct content the program expects, we need to look at the other block of code.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x04-03" src="http://www.accidentalrebel.com/images/ioli-crackme-0x04-03.png" /&gt;&lt;/p&gt;
&lt;p&gt;The code uses the same approach as the previous challenge where &lt;code&gt;var_counter&lt;/code&gt; is used to loop through individual characters in the input string.&lt;/p&gt;
&lt;p&gt;The part that is new is the use of the &lt;code&gt;_sscanf&lt;/code&gt; function which is defined as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"sscanf reads data from s and stores them according to parameter format into the locations given by the additional arguments, as if scanf was used, but reading from s instead of the standard input (stdin)."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at how the function &lt;code&gt;_sscanf&lt;/code&gt; is used, it gets each character in the input string and converts them to decimal integers. This means that the password can only contain the numbers &lt;em&gt;0 through 9&lt;/em&gt;. The reason for this is because the result is added to another value at the line &lt;code&gt;add [eax], edx&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;"other value"&lt;/em&gt; is the converted integer value from previous loops. This means that the algorithm adds each number from the input string after every loop. For example, an input string of &lt;code&gt;123&lt;/code&gt; translates to &lt;code&gt;1+2+3&lt;/code&gt; where the computed sum is saved to &lt;code&gt;var_8&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, there is the line &lt;code&gt;cmp [ebp+var_8], 0Fh&lt;/code&gt;, which tells us that the program expects the computed sum to be equal to &lt;code&gt;0Fh&lt;/code&gt; or &lt;code&gt;15&lt;/code&gt;. So as long as we enter numbers that would equal to &lt;code&gt;15&lt;/code&gt; when combined, then we are good.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x04-" src="http://www.accidentalrebel.com/images/ioli-crackme-0x04-.png" /&gt;&lt;/p&gt;
&lt;h1 id="patching-the-executables"&gt;Patching the executables&lt;/h1&gt;
&lt;p&gt;Patching the executable is different this time around. If on previous challenges we patched the program by changing an conditional opcode to a jmp (&lt;code&gt;74&lt;/code&gt; to &lt;code&gt;EB&lt;/code&gt;), for this one we only need to change the conditional to a &lt;code&gt;no op&lt;/code&gt; instruction (&lt;code&gt;00&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x04-05" src="http://www.accidentalrebel.com/images/ioli-crackme-0x04-05.png" /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the line &lt;code&gt;cmp [ebp+var_8]&lt;/code&gt; and the conditional branch disappears allowing us to go directly to the &lt;em&gt;"Password OK"&lt;/em&gt; part of the code.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x04-06" src="http://www.accidentalrebel.com/images/ioli-crackme-0x04-06.png" /&gt;&lt;/p&gt;
&lt;h1 id="on-to-the-next-challenge"&gt;On to the next challenge...&lt;/h1&gt;
&lt;p&gt;I liked this challenge mostly because it changed the passwords the program expects. The first time I tackled this challenge I used purely static analysis. I thought I got the answer only to realize that I was wrong by debugging the code. We have 5 more challenges to go!&lt;/p&gt;</content><category term="re"></category><category term="re"></category><category term="crackme"></category></entry><entry><title>Building my Virtual Cybersecurity Home Lab</title><link href="http://www.accidentalrebel.com/building-my-virtual-cybersecurity-home-lab.html" rel="alternate"></link><published>2021-09-05T20:33:00+08:00</published><updated>2021-09-05T20:33:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-09-05:/building-my-virtual-cybersecurity-home-lab.html</id><content type="html">&lt;p&gt;I have recently realized that one part of cybersecurity that I am lacking basic knowledge on is networking. I honestly did not think it was important when I was starting. It was the reason why I skipped Network+ so I could take Security+ directly. &lt;/p&gt;
&lt;p&gt;Now I know better.&lt;/p&gt;
&lt;p&gt;Ever since my realization, I have taken steps to patch the holes in my knowledge. I've started taking courses and bought books. But one thing that has made the most impact is me building my very own "homelab".&lt;/p&gt;
&lt;p&gt;I first came to know of the concept of homelabs &lt;a href="https://www.reddit.com/r/homelab/"&gt;from Reddit&lt;/a&gt;. To those unfamiliar, it is the practice of building a networked environment to gain practical knowledge in networking and IT. One way to do this is by making a virtual network.&lt;/p&gt;
&lt;p&gt;And so, over the past month, I have been building my very own virtual homelab with a focus on integrating cybersecurity products.&lt;/p&gt;
&lt;h1 id="the-lab"&gt;The Lab&lt;/h1&gt;
&lt;p&gt;The network diagram below shows the current implementation of my lab. I will be discussing each part to give an idea of their purpose (&lt;a href="http://www.accidentalrebel.com/images/building-my-virtual-cybersecurity-home-lab-00.png"&gt;Click here for a bigger version&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img alt="building-my-virtual-cybersecurity-home-lab-01" src="http://www.accidentalrebel.com/images/building-my-virtual-cybersecurity-home-lab-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;At the heart of the network is a firewall running &lt;a href="https://www.pfsense.org/"&gt;pfSense&lt;/a&gt;. Its purpose is to ensure that each sub-network is separated and protected, and also to protect my virtual host from any malware outbreaks. This machine also serves as a DHCP and NTP server to all the machines in the network.&lt;/p&gt;
&lt;p&gt;&lt;img alt="building-my-virtual-cybersecurity-home-lab-13" src="http://www.accidentalrebel.com/images/building-my-virtual-cybersecurity-home-lab-13.png" /&gt;&lt;/p&gt;
&lt;h1 id="the-target-network"&gt;The Target Network&lt;/h1&gt;
&lt;p&gt;On the right side of the diagram is the "Target" network where workstations and vulnerable servers reside. These are the machines that I use to attack with exploits and malware.&lt;/p&gt;
&lt;p&gt;&lt;img alt="building-my-virtual-cybersecurity-home-lab-02" src="http://www.accidentalrebel.com/images/building-my-virtual-cybersecurity-home-lab-02.png" /&gt;&lt;/p&gt;
&lt;p&gt;I have Metasploitable 2 and Metasploitable 3 machines that have various services turned on to play around with. I can learn about specific attacks by exploiting this machine, but I can also don my defenders hat and learn about how to secure them.&lt;/p&gt;
&lt;p&gt;The Windows and Linux machines will serve as typical workstations for various experiments.&lt;/p&gt;
&lt;p&gt;One of the perks of my job is that I get to play with different cybersecurity solutions. I currently have access to a few that I am able to use on my lab for testing.&lt;/p&gt;
&lt;p&gt;One solution that I am using right now is an EDR (Endpoint Detection and Response) (Sorry, I can't reveal which). Each machine has an EDR agent deployed which monitors for any malicious activities on the host. It has an anti-virus feature, anti-ransomware, and fileless attack monitoring. It's awesome stuff but I have yet to maximize this.&lt;/p&gt;
&lt;p&gt;An IDS (intrusion Detection System) running &lt;a href="https://www.snort.org/"&gt;Snort&lt;/a&gt; monitors the traffic for any malicious activity. Signatures are constantly updated to ensure that I can detect the latest types of attack. If it finds anything important, it then sends an alert to a SIEM (running &lt;a href="https://www.splunk.com/"&gt;Splunk&lt;/a&gt;) on the Management network.&lt;/p&gt;
&lt;p&gt;&lt;img alt="building-my-virtual-cybersecurity-home-lab-11" src="http://www.accidentalrebel.com/images/building-my-virtual-cybersecurity-home-lab-11.png" /&gt;&lt;/p&gt;
&lt;h1 id="the-management-network"&gt;The Management Network&lt;/h1&gt;
&lt;p&gt;On the left side of the diagram is the Managemnet network. This is where the management part of the EDR, IDS, and the SIEM can be accessed from my virtual host.&lt;/p&gt;
&lt;p&gt;&lt;img alt="building-my-virtual-cybersecurity-home-lab-03" src="http://www.accidentalrebel.com/images/building-my-virtual-cybersecurity-home-lab-03.png" /&gt;&lt;/p&gt;
&lt;p&gt;There's nothing special about this network, I do want to note though that I find it interesting the Snort IDS has two interfaces. One is used for access to the management page, and the other is for sniffing traffic on the Attacker network.&lt;/p&gt;
&lt;h1 id="the-operations-network"&gt;The Operations Network&lt;/h1&gt;
&lt;p&gt;At the bottom side of the diagram is the "Operations" network.&lt;/p&gt;
&lt;p&gt;A machine running Kali is placed here. I can launch attacks from this machine towards the vulnerable machines on the Target network. This machine also has OpenVAS scanner that helps in discovering vulnerabilities on the target machines.&lt;/p&gt;
&lt;p&gt;&lt;img alt="building-my-virtual-cybersecurity-home-lab-04" src="http://www.accidentalrebel.com/images/building-my-virtual-cybersecurity-home-lab-04.png" /&gt;&lt;/p&gt;
&lt;p&gt;A windows machine serves as my malware analysis lab. It contains a lot of malware analysis tools to aid with investigations. &lt;/p&gt;
&lt;p&gt;This machine is then connected to a &lt;a href="https://remnux.org/"&gt;Remnux&lt;/a&gt; Linux machine. All traffic from the Windows machine is port forwarded by Remnux. From here I can run Wireshark to inspect the traffic coming from the Windows malware lab and it can also spoof the network responses to influence the behavior of malware. If the Remnux machine is turned off, then the Windows machine is effectively cut off from the whole network. It's a really neat setup that &lt;a href="https://www.ariefprabowo.com/en/malware-analysis-en/personal-notes-building-a-malware-analysis-lab-environment/"&gt;I learned here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="the-present"&gt;The Present&lt;/h1&gt;
&lt;p&gt;While the main intent of the network is to learn networking and implementing cybersecurity products, I can also investigate malware and learn about exploits by launching attacks. So it has a lot of multiple uses, which is perfect for someone like me who gets interested in different aspects of cybersecurity.&lt;/p&gt;
&lt;p&gt;My host machine currently has 32GB, 8 cores, and a total of 1.75TB which may seem a lot but is not powerful enough for all the machines to run at the same time. As a workaround, I just open the machines that I need for a particular exercise.&lt;/p&gt;
&lt;p&gt;&lt;img alt="building-my-virtual-cybersecurity-home-lab-05" src="http://www.accidentalrebel.com/images/building-my-virtual-cybersecurity-home-lab-05.png" /&gt;&lt;/p&gt;
&lt;p&gt;For example, if I want to investigate malware then I only need the firewall, Remnux, and the windows malware lab open. But if I want to attack and run an exploit, while making sure that it gets detected, then I need the firewall, EDR, IPS, SIEM, Kali, and the target machine to be open at the same time. This easily consumes around 20GB+!&lt;/p&gt;
&lt;h1 id="the-future"&gt;The Future&lt;/h1&gt;
&lt;p&gt;Working on this homelab has taught me a lot of practical knowledge. It helped solidify a lot of networking concepts I've learned througout the years.&lt;/p&gt;
&lt;p&gt;I'm not stopping here though. I also plan to upgrade the Target network so it would better resemble an enterprise network. For example, setting up an active directory, an internal DNS server, and maybe even a mail server (why not?). This is so I could play around in detecting and remediating more varied enterprise-level scenarios.&lt;/p&gt;
&lt;p&gt;I am also hoping I could get access to more cybersecurity products so I could play around with them. A SOAR (Security Orchestration and Response) would be a nice addition that would work really well.&lt;/p&gt;
&lt;p&gt;But, of course, before I could do any of the above I first need to upgrade my RAM and add more cores!&lt;/p&gt;</content><category term="malware"></category><category term="malware"></category><category term="dev"></category></entry><entry><title>Making a RAT</title><link href="http://www.accidentalrebel.com/making-a-rat.html" rel="alternate"></link><published>2021-07-13T14:56:00+08:00</published><updated>2021-07-13T14:56:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-07-13:/making-a-rat.html</id><content type="html">&lt;p&gt;A Remote Access Tool (RAT) is used to remotely access a computer. It has legitimate uses but it can also be used for malicious purposes. I've seen it used in malware I've analyzed and I've always been curious as to how it works.&lt;/p&gt;
&lt;p&gt;I was following along the &lt;a href="https://handmadehero.org/"&gt;Handmade Hero project&lt;/a&gt; &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; when the topic about dynamic DLL loading came up. This is a process of dynamically loading a DLL at runtime which is useful if you want your program to check if a DLL is present in a system before loading it.&lt;/p&gt;
&lt;p&gt;Two of the system calls that were discussed were LoadLibrary and GetProcAddress. These were familiar to me as I've seen them used on malware shellcode I analyzed in the past. I later learned that this is also used as an anti-virus evasion technique. I found this interesting.&lt;/p&gt;
&lt;p&gt;Having learned how to do runtime DLL loading myself I decided to give it a try. And of course, a RAT is perfect for this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-a-rat-01" src="http://www.accidentalrebel.com/images/making-a-rat-01.png" /&gt;&lt;/p&gt;
&lt;h2 id="planning-the-ratchitecture"&gt;Planning the RATchitecture&lt;/h2&gt;
&lt;p&gt;A lot of famous RATs are packed with features like the ability to log keystrokes, take screenshots, and turn on a webcam. I just want mine to be simple and have basic functionality like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Execute command line commands remotely&lt;/li&gt;
&lt;li&gt;Download a file to the client&lt;/li&gt;
&lt;li&gt;Exfiltrate data via file upload&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can already do a lot of things even with the above basic functions. You can download a payload to the client, run it via remote command and then upload the results. You can even update the RAT itself using the same process!&lt;/p&gt;
&lt;p&gt;As an extra, I also wanted it to be stealthy. I am aware however that this is something that is not easily done. There are myriads of security defenses and I don't think I have the time and energy to have my RAT to be up-to-date with the latest evasion techniques. Having basic anti-debugging and anti-sandbox checks is enough for me.&lt;/p&gt;
&lt;p&gt;I've never made a RAT before but thankfully there are a lot of great resources online that helped me a lot:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/quantumcore/paradoxiaRAT"&gt;ParadoxiaRat&lt;/a&gt; is my main resource and has done a lot of the features I wanted to implement.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yatt-ze/The-Collection/tree/master/Source%20Codes/Botnets/DarkRat%20Loader/derkrut"&gt;DarkRAT&lt;/a&gt; is a leaked source code that gave me an idea of how a RAT used in the wild looks like&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vxunderground/WinAPI-Tricks"&gt;VXUnderground's WinAPI tricks&lt;/a&gt; taught me that there are alternative ways to do certain things to avoid detection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As for the name of the project, I decided on "RATwurst" after the german sausage, Bratwurst. Don't ask me why. I just thought it's funny that it had the letters RAT in it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-a-rat-02" src="http://www.accidentalrebel.com/images/making-a-rat-02.png" /&gt;&lt;/p&gt;
&lt;h2 id="the-nitty-gratty-details"&gt;The nitty gRATty details&lt;/h2&gt;
&lt;p&gt;The client is written in ANSI C because it's the language I prefer. Since I am only targeting Windows I chose MSVC for the compiler. Which is great because it allows me to use Visual Studio for debugging.&lt;/p&gt;
&lt;p&gt;The server, on the other hand, is written in Python because I wanted another excuse to practice with it. Choosing Python has been a good choice though because of the excellent low level &lt;a href="https://docs.python.org/3/library/socket.html"&gt;socket&lt;/a&gt; and &lt;a href="https://docs.python.org/3/library/cmd.html"&gt;cmd&lt;/a&gt; libraries.&lt;/p&gt;
&lt;p&gt;Sockets are used for communication between client and server. I've applied basic XOR obfuscation to the data to mask the traffic. The client and server can handle sending of strings and even executables over the network.&lt;/p&gt;
&lt;p&gt;When RATwurst is first executed. It does some anti-sandbox checks via process enumeration. It checks if there are more than 15 processe that are running and if there are virtualization tools present like &lt;code&gt;vmware.exe&lt;/code&gt;. It will also setup an auto-run registry entry for persistence. And also move the executable to Windows' temp folder and re-run it from there.&lt;/p&gt;
&lt;p&gt;Anti-debbuging checks are littered throughout the code which checks the amount of time it takes to reach from one part of the code to the next. This is used to detect if someone is stepping through the code, increasing the delay between code execution.&lt;/p&gt;
&lt;p&gt;When no shenanigans is detected then it'll proceed to work as intended. &lt;/p&gt;
&lt;p&gt;&lt;img alt="making-a-rat-02" src="http://www.accidentalrebel.com/images/making-a-rat-02.png" /&gt;&lt;/p&gt;
&lt;h2 id="for-edurational-purposes-only"&gt;For eduRATional purposes only&lt;/h2&gt;
&lt;p&gt;I've made the source of my project &lt;a href="https://github.com/accidentalrebel/ratwurst"&gt;available on Github&lt;/a&gt;. The aim is to share what I've learned so that others can learn too.&lt;/p&gt;
&lt;p&gt;I am aware of news of RAT authors having been arrested because of their work. They actively sought to gain money from their creation, I, of course, have no such plans.&lt;/p&gt;
&lt;p&gt;To make sure that I save myself from any legal problems, I've placed a disclaimer that I am not responsible for any misuse. While I am skeptical that a piece of text would prevent any legal action towards me, I do see other projects having their own disclaimers so I decided to do the same.&lt;/p&gt;
&lt;p&gt;I've also submitted my creation to a multi-scanner service like VirusTotal. This would help distribute my RATs signature to anti-virus companies so it can easily be detected when used in the wild.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id="a-ratisfying-learning-experience"&gt;A RATisfying learning experience&lt;/h2&gt;
&lt;p&gt;Making this project has been a lot of fun. &lt;/p&gt;
&lt;p&gt;The most useful thing that I learned is the client and server communication via sockets. I've dabbled with it before but only in this project have I actually sent actual data back and forth.&lt;/p&gt;
&lt;p&gt;I am also happy that I got to use more Windows APIs. It's fun to play around with what's available and it is opening my mind as to what other things I can make in the future.&lt;/p&gt;
&lt;p&gt;And of course, this project has given me a good insight into the techniques used by malware. Learning about them is not enough until you've built one yourself.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Handmade here is a project by Casey Muratori where a game is created from scratch live on stream, has been going on for 6+ years, it's awesome&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Multi-scanners help to easily distribute virus signatures to security services. An opposite to this are "no-distribute" sacnners. More info about this &lt;a href="https://www.bleepingcomputer.com/news/security/75-percent-of-malware-uploaded-on-no-distribute-scanners-is-unknown-to-researchers/"&gt;here&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="malware"></category><category term="malware"></category><category term="dev"></category></entry><entry><title>Finding phished passwords on a scam site</title><link href="http://www.accidentalrebel.com/finding-phished-passwords-on-a-scam-site.html" rel="alternate"></link><published>2021-05-01T20:56:00+08:00</published><updated>2021-05-01T20:56:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-05-01:/finding-phished-passwords-on-a-scam-site.html</id><content type="html">&lt;p&gt;Since my last post about &lt;a href="investigating-an-fb-phishing-site"&gt;my investigations of a Facebook phishing site&lt;/a&gt;, I have received several messages from friends asking me to check out other suspected phishing/scam sites. One of the most alarming out of them was this one where I was able to find the file where the scammer stores the phished usernames and passwords.&lt;/p&gt;
&lt;p&gt;&lt;img alt="finding-phished-passwords-from-a-scam-site-01" src="http://www.accidentalrebel.com/images/finding-phished-passwords-from-a-scam-site-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;This particular phishing site conducts its operations like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An ad is shown on Facebook, promising free coupons for famous fast food restaurants&lt;/li&gt;
&lt;li&gt;Clicking on the ad takes the user to a fake Facebook login page hosted on &lt;em&gt;blogger.com&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Login page then sends phished username and passwords to a PHP file hosted on &lt;em&gt;000webhost&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The phished passwords are then stored in a &lt;code&gt;.txt&lt;/code&gt; file (blatantly named, &lt;code&gt;victims.txt&lt;/code&gt;), which is publicly accessible on an open directory. Getting to this directory involved following the scripts and the URLs used by the scammers. It's not that hard to find as long as you know where to look.&lt;/p&gt;
&lt;p&gt;What's scary is that the size of this text file kept on getting bigger. I knew I had to act quickly.&lt;/p&gt;
&lt;h2 id="stopping-the-scammers"&gt;Stopping the scammers&lt;/h2&gt;
&lt;p&gt;Unfortunately, with phishing sites like these, there's not much we could do but report it to the relevant hosting providers. The problem is that sometimes it may take some time before the site gets reviewed, which is excruciating because the longer the wait, the more people fall victim. Some might even just ignore your report altogether!&lt;/p&gt;
&lt;p&gt;I reported the fake login page to Blogger.com and did not receive any response at all. I understand that Blogger.com is a big platform and I bet they receive numerous reports like this. I guess this is why the scammer used this platform as they know they won't be taken down too quickly. Their profile even listed two sites that both had fake login pages. &lt;/p&gt;
&lt;p&gt;&lt;img alt="finding-phished-passwords-from-a-scam-site-04" src="http://www.accidentalrebel.com/images/finding-phished-passwords-from-a-scam-site-04.png" /&gt;&lt;/p&gt;
&lt;p&gt;Thankfully, &lt;em&gt;000webhost&lt;/em&gt; got back to me and eventually took down the page that hosted the PHP and text files.&lt;/p&gt;
&lt;p&gt;&lt;img alt="finding-phished-passwords-from-a-scam-site-03" src="http://www.accidentalrebel.com/images/finding-phished-passwords-from-a-scam-site-03.png" /&gt;&lt;/p&gt;
&lt;p&gt;You'd think that this is a victory. But sadly, setting up a new phishing site is rather easy so within a few hours there is already a new one. Of course, I reported this new site too. Only for a new one to pop up later...&lt;/p&gt;
&lt;p&gt;You can see how this can become an endless cat and mouse game.&lt;/p&gt;
&lt;h2 id="stopping-from-other-sources"&gt;Stopping from other sources&lt;/h2&gt;
&lt;p&gt;One way that could be effective to stop the scammer's operations is by reporting the Facebook advertisement that is used to lure users to the phishing site. Unfortunately, my friend who shared this with me did not get a chance to snap a screenshot of the ad. If he did then it would probably have more impact on stopping their operations. Maybe the Facebook abuse team can trace the payment details used to pay for the ad, and maybe block it. &lt;/p&gt;
&lt;p&gt;&lt;img alt="finding-phished-passwords-from-a-scam-site-02" src="http://www.accidentalrebel.com/images/finding-phished-passwords-from-a-scam-site-02.png" /&gt;&lt;/p&gt;
&lt;p&gt;If you know anyone who may have seen a Facebook advertisement that offers free coupon codes for fast food restaurants that might be pointing to a suspicious login page, then please do contact me!&lt;/p&gt;
&lt;h2 id="awareness-is-the-key"&gt;Awareness is the key&lt;/h2&gt;
&lt;p&gt;As of this posting, the landing page is still up while the page that hosts the PHP and victims file is down. I'm sure it'll be back up soon. All I was able to do was delay their operations. A minor inconvenience for them.&lt;/p&gt;
&lt;p&gt;&lt;img alt="finding-phished-passwords-from-a-scam-site-05" src="http://www.accidentalrebel.com/images/finding-phished-passwords-from-a-scam-site-05.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is why out of everything, spreading awareness is the best countermeasure. If people are more aware of phishing sites and how to avoid them then that would greatly diminish their impact. This is why I continue to post and write about phishing sites. Seeing the number of victims rising like that made me act knowing that I at least have the power to prevent things from escalating.&lt;/p&gt;
&lt;p&gt;And you have the power too, dear reader. Educate your family and friends by warning them or by showing them my posts. Remember, awareness is our best defense!&lt;/p&gt;</content><category term="phishing, threat-hunting, osint"></category><category term="phishing"></category></entry><entry><title>Emprisa Maldoc Writeup</title><link href="http://www.accidentalrebel.com/emprisa-maldoc-writeup..html" rel="alternate"></link><published>2021-04-30T05:58:00+08:00</published><updated>2021-04-30T05:58:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-04-30:/emprisa-maldoc-writeup..html</id><content type="html">&lt;blockquote&gt;
&lt;p&gt;This is a writeup for &lt;a href="the-emprisa-maldoc-challenge"&gt;Emprisa maldoc challenge&lt;/a&gt; that I made for &lt;a href="https://cyberdefenders.org/"&gt;CyberDefenders.org&lt;/a&gt;. You can play it &lt;a href="https://cyberdefenders.org/labs/56"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The very first thing that I do when confronted with a malicious document is to run it in a malware lab. This particular document, however, would not exhibit anything malicious on recent versions of Word.&lt;/p&gt;
&lt;p&gt;A quick search of the hash on malware sandboxes would reveal that the document makes use of the &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2017-18822"&gt;CVE-2017-18822 vulnerability&lt;/a&gt;. This is a vulnerability that became known and was promptly patched around November of 2017.&lt;/p&gt;
&lt;p&gt;The above details give us a hint on how to trigger the document, which is to run the maldoc on a version of Microsoft Word that doesn't have the patches that fix the vulnerability. The easiest way to do this is to boot up a new VM with a fresh install of Windows 7 and with updates disabled.&lt;/p&gt;
&lt;p&gt;This new environment is where the document would trigger once double-clicked. After a bit of loading, a pop-up would later appear greeting the analyst with congratulations (this is a stand-in for a malicious payload for this challenge), but of course, it is clear that we are not done yet.&lt;/p&gt;
&lt;p&gt;&lt;img alt="emprisa-maldoc-writeup-01" src="http://www.accidentalrebel.com/images/emprisa-maldoc-writeup-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;Tools such as &lt;a href="https://processhacker.sourceforge.io/"&gt;Process Hacker&lt;/a&gt; will reveal a new process named &lt;code&gt;EQNEDT32.EXE&lt;/code&gt; getting spawned right after opening the document. Those who have read through the CVE details would know that this is the expected behavior, as the vulnerability uses this process to run malicious code. In this case, the exploit downloads a file from the internet and automatically runs it.&lt;/p&gt;
&lt;p&gt;Another tool such as &lt;a href="https://sourceforge.net/projects/regshot/"&gt;Regshot&lt;/a&gt; would reveal newly created files. It can determine these by taking a snapshot before the malicious document is opened, then taking another one after the downloaded payload gets triggered, and finally comparing the two snapshots and listing the differences. It's an invaluable tool to have.&lt;/p&gt;
&lt;p&gt;&lt;img alt="emprisa-maldoc-writeup-02" src="http://www.accidentalrebel.com/images/emprisa-maldoc-writeup-02.png" /&gt;&lt;/p&gt;
&lt;p&gt;Running &lt;a href="https://github.com/DidierStevens/DidierStevensSuite/blob/master/rtfdump.py"&gt;rtfdump.py&lt;/a&gt; would then reveal some telling details about our maldoc, like for example, magic signatures and object streams.&lt;/p&gt;
&lt;p&gt;Upon close inspection of the hexdump of the largest object stream (still via rtfdump), one would see a sequence of NOPs (aka a NOPsled) in certain parts. A NOPsled such as this usually indicates the possible start of shellcode. Carving this part of the shellcode and running it on an emulator such as &lt;a href="https://github.com/fireeye/speakeasy"&gt;speakeasy&lt;/a&gt; or &lt;a href="http://sandsprite.com/blogs/index.php?uid=7&amp;amp;pid=152"&gt;scdbg&lt;/a&gt; won't work properly, however.&lt;/p&gt;
&lt;p&gt;&lt;img alt="emprisa-maldoc-writeup-03" src="http://www.accidentalrebel.com/images/emprisa-maldoc-writeup-03.png" /&gt;&lt;/p&gt;
&lt;p&gt;The output shows the first line to be &lt;code&gt;LoadLibrary&lt;/code&gt;, and then there's an error after that. This indicates that maybe there's a problem with the shellcode. &lt;/p&gt;
&lt;p&gt;On further inspection, a little more further down there is another set of seemingly readable strings. This could indicate another shellcode. Or, maybe, a continuation of the first one? In between these supposed two shellcodes is a readable string that seems out of place in between the gibberish. Carving the two shellcodes and then combining them would now work when run on an emulator.&lt;/p&gt;
&lt;p&gt;&lt;img alt="emprisa-maldoc-writeup-04" src="http://www.accidentalrebel.com/images/emprisa-maldoc-writeup-04.png" /&gt;&lt;/p&gt;
&lt;p&gt;If the previous solution was not immediately clear to you then there is another approach to the above. And that is to step through the &lt;code&gt;EQNEDT32&lt;/code&gt; process as soon as it runs. However, attaching to this process is tricky as it triggers only for a split second and then exits. To debug this, a debugger should be automatically connected as soon as the process starts. Check out &lt;a href="https://pentestlab.blog/2020/01/13/persistence-image-file-execution-options-injection/"&gt;this post&lt;/a&gt; for details on how to do this.&lt;/p&gt;
&lt;p&gt;Once attached, the painstaking process of debugging begins. Thankfully, we have an idea of what code is being loaded into memory. And this is the shellcode that has a NOPSled during our analysis with rtfdump.py above. Looking for this sequence and then putting a breakpoint where the memory location is accessed would stop the program just before the shellcode is run. Once the breakpoint triggered, we could step through the shellcode and find out what exactly the shellcode does and which Libraries are being called.&lt;/p&gt;
&lt;p&gt;From here, we could also backtrack from where the shellcode is called to figure out how the exploit is triggered via a buffer overflow. This requires a bit of knowledge in reverse engineering. An alternative is to &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2017-18822"&gt;check out the CVE details&lt;/a&gt; in search for the tool that was likely used to make the exploit, and then examining the code.&lt;/p&gt;
&lt;p&gt;After all of that, you should have everything that you need to answer all the questions in the challenge. You may have noticed that I have not revealed the answers outright. You still have to find it on your own. However, I do hope that by walking you through the process, I have helped you understand how to get there.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have more questions, or want to tell me what you think of the challenge, feel free to leave a comment below or send me a mesage at @accidentalrebel. &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="maldoc, writeup, ctf"></category><category term="writeup"></category></entry><entry><title>Investigating an FB phishing site</title><link href="http://www.accidentalrebel.com/investigating-an-fb-phishing-site.html" rel="alternate"></link><published>2021-04-24T05:58:00+08:00</published><updated>2021-04-24T05:58:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-04-24:/investigating-an-fb-phishing-site.html</id><content type="html">&lt;p&gt;Last April 21, people were posting warnings about a suspicious Facebook post where your account will supposedly get hacked when you click it. From the discussions, I gathered that it is a classic phishing site scam. A very effective one too, because as soon as an account gets compromised the attacker logs in and tags the friends in the account allowing it to spread further. The news of this got big that even the PH CERT issued &lt;a href="https://www.facebook.com/Ncertgovph/posts/1879686332199270"&gt;a security advisory on it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="checking-the-fb-phishing-site-02" src="http://www.accidentalrebel.com/images/checking-the-fb-phishing-site-02.jpg" /&gt;&lt;/p&gt;
&lt;h1 id="i-was-just-curious-i-swear"&gt;I was just curious, I swear!&lt;/h1&gt;
&lt;p&gt;I wanted to see the phishing site for myself but I was unlucky and did not get tagged by anyone. So I reached out to people who did and I eventually got to this page shown below:&lt;/p&gt;
&lt;p&gt;&lt;img alt="checking-the-fb-phishing-site-01" src="http://www.accidentalrebel.com/images/checking-the-fb-phishing-site-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;To a trained eye, one could easily see the obvious red flags. But how can one notice them if there is a very attention-catching image in the middle beckoning to be clicked? It's a very simple tactic yet very effective. Clicking this link leads to an external website with an even more tantalizing image masquerading as a video. &lt;/p&gt;
&lt;p&gt;&lt;img alt="checking-the-fb-phishing-site-03" src="http://www.accidentalrebel.com/images/checking-the-fb-phishing-site-03.png" /&gt;&lt;/p&gt;
&lt;p&gt;Clicking play on that video would then lead to a fake Facebook login page. We all know what's next after that. &lt;/p&gt;
&lt;p&gt;&lt;img alt="checking-the-fb-phishing-site-06" src="http://www.accidentalrebel.com/images/checking-the-fb-phishing-site-06.png" /&gt;&lt;/p&gt;
&lt;p&gt;Of course, the very best course of action when a phishing site is discovered is to report it. I, however, was curious so I decided to poke around first.&lt;/p&gt;
&lt;h1 id="the-poking-begins"&gt;The poking begins&lt;/h1&gt;
&lt;p&gt;Using my knowledge in OSINT (Open Source Intelligence) and pentesting, I poked around to see what I could learn from these set of pages.&lt;/p&gt;
&lt;p&gt;One thing that immediately became obvious was that these "set of pages" were hosted on separate domains. The page with the video points to one domain, and the login page to another (that is even protected by DDNS (Dynamic DNS) via No-IP). &lt;/p&gt;
&lt;p&gt;&lt;img alt="investigating-an-fb-phishing-site-08" src="http://www.accidentalrebel.com/images/investigating-an-fb-phishing-site-08.png" /&gt;&lt;/p&gt;
&lt;p&gt;I also noticed that the way that the two pages were built was different. The coding style is not the same, different frameworks were used, plus the robots.txt of the login page was more restrictive. &lt;/p&gt;
&lt;p&gt;Why are they in separate domains? Wouldn't it be cheaper to just have both pages on the same domain? &lt;/p&gt;
&lt;p&gt;My hunch is that maybe the two sites were made by different people. One guy made the landing page then a different one made the login page. Or maybe the login page is an out-of-the-box solution you pay for or rent if you want to set up your own phishing scam? A PhAAS (Phishing-as-a-Service)?&lt;/p&gt;
&lt;p&gt;&lt;img alt="investigating-an-fb-phishing-site-09" src="http://www.accidentalrebel.com/images/investigating-an-fb-phishing-site-09.png" /&gt;&lt;/p&gt;
&lt;p&gt;During my reconnaissance, I also noticed that the URLs for the login page were changed a few times over a few hours. It's possible that the pages were being taken down thanks to the reports and the malicious actors were just making new instances and redirecting to it to make sure that the operation continues.&lt;/p&gt;
&lt;h1 id="ang-nhap-hoac-ang"&gt;Đăng nhập hoặc đăng&lt;/h1&gt;
&lt;p&gt;Another thing I noticed is references to various Vietnamese terms and websites. Both pages have directories using the word "homnay", Vietnamese for the word "today". The source code also has a link to the news website "tuoitre.vn". &lt;/p&gt;
&lt;p&gt;&lt;img alt="checking-the-fb-phishing-site-04" src="http://www.accidentalrebel.com/images/checking-the-fb-phishing-site-04.png" /&gt;&lt;/p&gt;
&lt;p&gt;The Google Analytics ID used can also be found in previously tagged but now-defunct Phishing websites with references to Vietnam. It's entirely possible that these phishing sites initially targeted Vietnamese users but eventually got to Philippine users via the tagging spreading mechanism.&lt;/p&gt;
&lt;p&gt;&lt;img alt="checking-the-fb-phishing-site-05" src="http://www.accidentalrebel.com/images/checking-the-fb-phishing-site-05.png" /&gt;&lt;/p&gt;
&lt;p&gt;Or maybe it's a deliberate ploy to make it seem that the origin of the phish is Vietnamese. Just to throw off those of us snooping around.&lt;/p&gt;
&lt;h1 id="and-then-it-was-gone"&gt;And then it was gone&lt;/h1&gt;
&lt;p&gt;I was tempted to make a dummy Facebook account and send the login details to the phishing site. The idea was to see how long before an account gets accessed after submitting the credentials and if the tagging of friends is automated or done manually. But sadly I ran out of free time and by the time I came back to it the login page was already completely offline. The landing page is still up though.&lt;/p&gt;
&lt;p&gt;This investigation has taught me a lot about phishing sites. It's different from investigating malware but it's easy to see the similarities in intent and approaches. I might try investigating more in the future. I'm curious to find out what the usual &lt;em&gt;modus operandi&lt;/em&gt; is and also how the general populace can better protect themselves from it. &lt;/p&gt;
&lt;p&gt;This particular site may be down now, but I bet there will be more in the future. As long as there are people to fall for scams like these, this type of attack will continue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to know more or discuss the details about the phishing site, I would be happy to exchange notes. Drop me a line on Twitter @accidentalrebel.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="phishing, threat-hunting, osint"></category><category term="phishing"></category></entry><entry><title>The Emprisa Maldoc Challenge</title><link href="http://www.accidentalrebel.com/the-emprisa-maldoc-challenge.html" rel="alternate"></link><published>2021-04-04T16:37:00+08:00</published><updated>2021-04-04T16:37:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-04-04:/the-emprisa-maldoc-challenge.html</id><content type="html">&lt;p&gt;I was inspired to make my own CTF challenge after finishing &lt;a href="{filename}/maldoc101-writeup-part-1"&gt;Maldoc101&lt;/a&gt; found at &lt;a href="https://cyberdefenders.org/"&gt;Cyberdefenders.org&lt;/a&gt;. The challenge I made is called &lt;a href="https://cyberdefenders.org/labs/56"&gt;Emprisa Maldoc&lt;/a&gt; and it is now up on their website. &lt;/p&gt;
&lt;p&gt;Emprisa is based on a malicious document that I downloaded blindly from a malware sandbox. It used a relatively old but still interesting exploit that is still in use today. After researching more about it I came across a tool that can generate a malicious doc using the same exact exploit. This is when I got the idea to turn it into a challenge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="the-emprisa-maldoc-challenge-01" src="http://www.accidentalrebel.com/images/the-emprisa-maldoc-challenge-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;The challenge has 14 questions with increasing and varying difficulty. The challenge is targeted towards intermediate analysts who already have experience examining maldocs before. The goal is to reinforce the use of common malware analysis tools, but at the same time, teach players new things and techniques. It involves flexing muscles related to open source intelligence, examining shellcodes, and debugging processes. &lt;/p&gt;
&lt;p&gt;I don't want to spoil too much but if you are for it, you can give it a go &lt;a href="https://cyberdefenders.org/labs/51"&gt;here&lt;/a&gt;. It was hella fun to make and I do hope that it is also as fun to solve!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Official write-up with hints coming soon.&lt;/p&gt;
&lt;p&gt;I would like to extend my thanks to the team behind CyberDefenders.org. They accepted my submission, reviewed it, and worked with me in improving it. And also to &lt;a href="https://twitter.com/jstrosch"&gt;Josh Stroschein&lt;/a&gt; for making Maldoc101 and being kind enough to entertain me with my questions related to making challenges.&lt;/p&gt;</content><category term="ctf"></category><category term="maldoc"></category><category term="ctf"></category></entry><entry><title>IOLI Crackme 0x03</title><link href="http://www.accidentalrebel.com/ioli-crackme-0x03.html" rel="alternate"></link><published>2021-03-22T20:03:00+08:00</published><updated>2021-03-22T20:03:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-03-22:/ioli-crackme-0x03.html</id><content type="html">&lt;p&gt;I am continuing my reverse engineering review by tackling the &lt;em&gt;IOLI crackmes&lt;/em&gt; by &lt;a href="https://twitter.com/pof"&gt;@pof&lt;/a&gt;. These are beginner friendly challenges that is perfect for newbies or for those who want to review the basics like me. Check out my writeups for &lt;a href="http://www.accidentalrebel.com/ioli-crackme-0x00.html"&gt;0x00&lt;/a&gt;, &lt;a href="http://www.accidentalrebel.com/ioli-crackme-0x01.html"&gt;0x01&lt;/a&gt;, and &lt;a href="http://www.accidentalrebel.com/ioli-crackme-0x02.html"&gt;0x02&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="getting-the-password"&gt;Getting the password&lt;/h1&gt;
&lt;p&gt;After opening the program in IDA I immediately saw that the code is almost exactly as the one in challenge &lt;a href="http://www.accidentalrebel.com/ioli-crackme-0x02.html"&gt;0x02&lt;/a&gt;, with the exception of our expected &lt;code&gt;cmp&lt;/code&gt; command being inside the &lt;code&gt;_test&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x03-01" src="http://www.accidentalrebel.com/images/ioli-crackme-0x03-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;Reading through the code I realized that the password for this challenge is exactly the same as the previous one!&lt;/p&gt;
&lt;p&gt;But what's this? The success and failure messages are all garbled? And plus, what is this other new function called &lt;code&gt;_shift&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x03-02" src="http://www.accidentalrebel.com/images/ioli-crackme-0x03-02.png" /&gt;&lt;/p&gt;
&lt;h1 id="a-different-kind-of-challenge"&gt;A different kind of challenge&lt;/h1&gt;
&lt;p&gt;Opening up the &lt;code&gt;_shift&lt;/code&gt; function shows us a short, but interesting looking program flow with two branches and one of the branches looping back. It seems we have a &lt;em&gt;loop&lt;/em&gt; here that we could investigate.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x03-03" src="http://www.accidentalrebel.com/images/ioli-crackme-0x03-03.png" /&gt;&lt;/p&gt;
&lt;p&gt;If we look at the input that the function takes we will find out that the strings that are being passed from the &lt;code&gt;_test&lt;/code&gt; function are &lt;code&gt;Lqydolg#Sdvvzrug$&lt;/code&gt; and &lt;code&gt;Sdvvzrug#RN$$$#=,&lt;/code&gt; for the &lt;em&gt;failure&lt;/em&gt; and &lt;em&gt;success&lt;/em&gt; messages, respectively. This tells us that a cipher is applied to these strings. What cipher it is using is what we'll be trying to find out.&lt;/p&gt;
&lt;h1 id="discovering-the-cipher"&gt;Discovering the cipher&lt;/h1&gt;
&lt;p&gt;The best way to discover the cipher used is to step through the code. We can do it with both static or dynamic analysis, but the latter is way easier.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x03-04" src="http://www.accidentalrebel.com/images/ioli-crackme-0x03-04.png" /&gt;&lt;/p&gt;
&lt;p&gt;The code above starts with &lt;code&gt;mov eax, [ebp+arg_0]&lt;/code&gt; which copies the pointer to the string passed to our &lt;code&gt;_shift&lt;/code&gt; function. We then copy that pointer to &lt;code&gt;[esp+98h+Str]&lt;/code&gt; which is the memory location pointing to the top of the current stack. This is done so that it can be passed as an argument when we do &lt;code&gt;call _strlen&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After executing, &lt;code&gt;_strlen&lt;/code&gt; returns the length of the specified string and is saved to register &lt;code&gt;eax&lt;/code&gt;. This is then used in the line &lt;code&gt;cmp [ebp+var_7C], eax&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;But what is the value of &lt;code&gt;var_7C&lt;/code&gt;? If you scroll up at the start of the subroutine, &lt;code&gt;var_7C&lt;/code&gt; is assigned a value of zero. If you know how loops work, you'll realize that this variable is going to be used to hold a counter value. It starts at a value of &lt;code&gt;0&lt;/code&gt; and it will eventually be incremented after every loop, which is what is happening at &lt;code&gt;401348&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To make it easy for us to remember this, let's rename &lt;code&gt;var_7C&lt;/code&gt; to a more memorable name like &lt;code&gt;var_counter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x03-05" src="http://www.accidentalrebel.com/images/ioli-crackme-0x03-05.png" /&gt;&lt;/p&gt;
&lt;p&gt;So going back, to the comparison command &lt;code&gt;cmp [ebp+var_counter], eax&lt;/code&gt;, which now translates to &lt;code&gt;cmp 0, 17&lt;/code&gt;. &lt;em&gt;17&lt;/em&gt; being the length of our failure string &lt;code&gt;Lqydolg#Sdvvzrug$&lt;/code&gt;. Since this is not equal it now goes to this next block of code.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x03-06" src="http://www.accidentalrebel.com/images/ioli-crackme-0x03-06.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now this block is interesting. There's a lot that is happening but the gist of it is that the program gets one character from the input string, with &lt;code&gt;var_counter&lt;/code&gt; as an offset. It then decrements that character value by 3, and added to a destination string. I'll be going through the code that I described step by step in the next section.&lt;/p&gt;
&lt;h1 id="stepping-through"&gt;Stepping through&lt;/h1&gt;
&lt;p&gt;So to start, &lt;code&gt;lea eax, [ebp+var_78]&lt;/code&gt; loads the address to &lt;code&gt;var_78&lt;/code&gt; which in my case points to the address &lt;code&gt;28FE90&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mov edx, eax&lt;/code&gt; copies that address to &lt;code&gt;edx&lt;/code&gt; so we can use it on the next line.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;add edx, [ebp+var_counter]&lt;/code&gt; adds to the address of &lt;code&gt;var_78&lt;/code&gt;. Because &lt;code&gt;var_counter&lt;/code&gt; is still &lt;code&gt;0&lt;/code&gt;, the address remains at &lt;code&gt;28FE90&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;add eax, [ebp+arg_0]&lt;/code&gt; does the same thing as above but this time adding to &lt;code&gt;[arg_0]&lt;/code&gt; which contains the address &lt;code&gt;28FF10&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;movzx eax, byte ptr [eax]&lt;/code&gt; copies the byte contained in &lt;code&gt;[eax]&lt;/code&gt; or &lt;code&gt;28FF10&lt;/code&gt;. In this case that byte contains the value &lt;code&gt;4Ch&lt;/code&gt; or &lt;code&gt;L&lt;/code&gt; in ASCII. This is the first letter in our failure string &lt;code&gt;Lqydolg#Sdvvzrug$&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sub al, 3&lt;/code&gt; then substracts 3 to &lt;code&gt;4Ch&lt;/code&gt; making it &lt;code&gt;49h&lt;/code&gt; which is ASCII for &lt;code&gt;I&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mov [edx], al&lt;/code&gt; saves the new character to the variable &lt;code&gt;var_78&lt;/code&gt; which is the memory location &lt;code&gt;28FE90&lt;/code&gt;. At this point in time the content is currently the character &lt;code&gt;I&lt;/code&gt;. To make it easy for us to understand the code, let's rename &lt;code&gt;var_78&lt;/code&gt; to &lt;code&gt;var_dest&lt;/code&gt;. This name is apt because this will be the destination for our shifted ASCII characters.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lea eax, [ebp+var_counter]&lt;/code&gt; and then &lt;code&gt;inc dword ptr [eax]&lt;/code&gt; now increments the value of &lt;code&gt;var_counter&lt;/code&gt;, which now makes it an integer value of &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="looping-back"&gt;Looping back&lt;/h1&gt;
&lt;p&gt;Alright. Now we go back up again to &lt;code&gt;loc_401320&lt;/code&gt;. I'm not going to step through each line again, but I will highlight the important parts now that we have looped back.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmp [ebp+var_counter]&lt;/code&gt; now translates to &lt;code&gt;cmp 1, 17&lt;/code&gt;, which is still not equal.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;add edx, [ebp+var_counter]&lt;/code&gt; now adds 1 to our &lt;code&gt;var_dest&lt;/code&gt; variable, turning &lt;code&gt;28FE90&lt;/code&gt; to &lt;code&gt;28FE91&lt;/code&gt;. The address for the &lt;code&gt;arg_0&lt;/code&gt; variable is also added by 1 at &lt;code&gt;add eax, [ebp+arg_0]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By the time &lt;code&gt;movzx eax, byte ptr [eax]&lt;/code&gt; is executed it now gets the next character in our failure string which is &lt;code&gt;71h&lt;/code&gt; or the letter &lt;code&gt;q&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sub al, 3&lt;/code&gt; converts are letter &lt;code&gt;q&lt;/code&gt; to the letter &lt;code&gt;n&lt;/code&gt;. And is once again saved to our &lt;code&gt;var_dest&lt;/code&gt; variable with the command &lt;code&gt;mov [edx], al&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="repeat-until"&gt;Repeat until...&lt;/h1&gt;
&lt;p&gt;If I haven't lost you, then you should now be able to follow what will happen in the next steps:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var_counter&lt;/code&gt; will get incremented again and again, which will point to the next characters in the string. For example, the next characters: &lt;code&gt;y&lt;/code&gt; then &lt;code&gt;d&lt;/code&gt; then &lt;code&gt;o&lt;/code&gt; will get shifted to &lt;code&gt;v&lt;/code&gt; then &lt;code&gt;a&lt;/code&gt; then &lt;code&gt;l&lt;/code&gt;, respectively. This shifting of each characters will continue until &lt;code&gt;cmp [ebp+var_counter&lt;/code&gt; equates to &lt;code&gt;cmp 17, 17&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;By the end, &lt;code&gt;var_dest&lt;/code&gt; now contains the newly shifted string &lt;code&gt;Invalid Password!&lt;/code&gt;. Finally! Applying the same code above to the success message, the garbled message would end with &lt;code&gt;Password OK!!! :)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Wasn't that fun?&lt;/p&gt;
&lt;h1 id="on-to-the-next-challenge"&gt;On to the next challenge&lt;/h1&gt;
&lt;p&gt;I hope I was able to explain properly the simple shifting algorithm used by the program above. I did it this way mostly for my own benefit and to make sure I really did understand how the algorithm worked in assembly. In future writeups I'll refrain from stepping through code at such a granular level, unless there is something really important that warrants it. Or maybe a video would be a much better format for these kinds of challenges?&lt;/p&gt;
&lt;p&gt;Anyway, I look forward to the next challenge. Hopefully, you are too!&lt;/p&gt;</content><category term="re"></category><category term="re"></category><category term="crackme"></category></entry><entry><title>Maldoc101 Writeup (Part 1)</title><link href="http://www.accidentalrebel.com/maldoc101-writeup-part-1.html" rel="alternate"></link><published>2021-03-13T08:34:00+08:00</published><updated>2021-03-13T08:34:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-03-13:/maldoc101-writeup-part-1.html</id><content type="html">&lt;p&gt;This is part 1 out of 2 of my writeup for the Maldoc101 challenge made by Josh Stroschein (&lt;a href="https://twitter.com/jstrosch"&gt;@jstrosch&lt;/a&gt;) and is currently playable at &lt;a href="https://cyberdefenders.org/labs/51"&gt;Cyberdefenders.Org&lt;/a&gt;. I've done some maldoc analysis before but this is the first time I'm writing about my approach.&lt;/p&gt;
&lt;p&gt;There is also an already existing writeup about this challenge &lt;a href="https://github.com/jstrosch/malware-samples/blob/master/malware_analysis_exercises/2020/December/solution.md"&gt;from the creator himself&lt;/a&gt;. You should check that out if you want a more detailed and focused writeup. This writeup is more from the perspective of someone relatively new to malware analysis. There's a lot more exploration and trial-and-error which, I hope, might give the reader a different view in how this kind of problem is approached.&lt;/p&gt;
&lt;h2 id="the-challenge"&gt;The challenge&lt;/h2&gt;
&lt;h3 id="name"&gt;Name&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cyberdefenders.org/labs/51"&gt;MalDoc101 - Malicious Document&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="description"&gt;Description&lt;/h3&gt;
&lt;p&gt;It is common for threat actors to utilize living off the land (LOTL) techniques, such as the execution of PowerShell to further their attacks and transition from macro code. This challenge is intended to show how you can often times perform quick analysis to extract important IOCs. The focus of this exercise is on static techniques for analysis.&lt;/p&gt;
&lt;h3 id="suggested-tools"&gt;Suggested Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;REMnux Virtual Machine (remnux.org)&lt;/li&gt;
&lt;li&gt;Terminal/Command prompt w/ Python installed&lt;/li&gt;
&lt;li&gt;Oledump&lt;/li&gt;
&lt;li&gt;Text editor&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-easy-questions"&gt;The easy questions&lt;/h2&gt;
&lt;p&gt;The first question seems very easy. The &lt;em&gt;suggested tools&lt;/em&gt; section above also gives us an idea how to approach this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What streams contain macros in this document? (comma-separated, ascending).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://blog.didierstevens.com/programs/oledump-py/"&gt;oledump.py&lt;/a&gt; is a tool made by &lt;a href="https://blog.didierstevens.com/about/"&gt;Didier Stevens&lt;/a&gt; that allows the analysis of data streams found in OLE files such as MS Office documetns. Running the command below would show us which streams have macros in it. These are denoted with the character &lt;em&gt;M&lt;/em&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;oledump.py sample.bin
&lt;span class="go"&gt;  1:       114 &amp;#39;\x01CompObj&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;  2:      4096 &amp;#39;\x05DocumentSummaryInformation&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;  3:      4096 &amp;#39;\x05SummaryInformation&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;  4:      7119 &amp;#39;1Table&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;  5:    101483 &amp;#39;Data&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;  6:       581 &amp;#39;Macros/PROJECT&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;  7:       119 &amp;#39;Macros/PROJECTwm&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;  8:     12997 &amp;#39;Macros/VBA/_VBA_PROJECT&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;  9:      2112 &amp;#39;Macros/VBA/__SRP_0&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt; 10:       190 &amp;#39;Macros/VBA/__SRP_1&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt; 11:       532 &amp;#39;Macros/VBA/__SRP_2&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt; 12:       156 &amp;#39;Macros/VBA/__SRP_3&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt; 13: M    1367 &amp;#39;Macros/VBA/diakzouxchouz&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt; 14:       908 &amp;#39;Macros/VBA/dir&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt; 15: M    5705 &amp;#39;Macros/VBA/govwiahtoozfaid&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt; 16: m    1187 &amp;#39;Macros/VBA/roubhaol&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt; 17:        97 &amp;#39;Macros/roubhaol/\x01CompObj&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt; ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I later noticed that there is an upper-case and lower-case &lt;em&gt;M&lt;/em&gt;. I learned that the upper-case &lt;em&gt;M&lt;/em&gt; denotes a macro with a code. The lower-case denotes a user form. This is a distinction that will be important later in this challenge.&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;What command-line argument with Oledump do you use to view the raw content of a stream? (Do not include the leading dash) &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The next question is another easy one which ran easily be solved through &lt;code&gt;oledump.py&lt;/code&gt;'s &lt;em&gt;--help&lt;/em&gt; parameter.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;oledump.py --help
&lt;span class="go"&gt;Usage: oledump.py [options] [file]&lt;/span&gt;
&lt;span class="go"&gt;Analyze OLE files (Compound Binary Files)&lt;/span&gt;

&lt;span class="go"&gt;Options:&lt;/span&gt;
&lt;span class="go"&gt;  --version             show program&amp;#39;s version number and exit&lt;/span&gt;
&lt;span class="go"&gt;  -h, --help            show this help message and exit&lt;/span&gt;
&lt;span class="go"&gt;  -m, --man             Print manual&lt;/span&gt;
&lt;span class="go"&gt;  -s SELECT, --select=SELECT&lt;/span&gt;
&lt;span class="go"&gt;                        select item nr for dumping (a for all)&lt;/span&gt;
&lt;span class="go"&gt;  -d, --dump            perform dump&lt;/span&gt;
&lt;span class="go"&gt;  -x, --hexdump         perform hex dump&lt;/span&gt;
&lt;span class="go"&gt;  -a, --asciidump       perform ascii dump&lt;/span&gt;
&lt;span class="go"&gt;  -A, --asciidumprle    perform ascii dump with RLE&lt;/span&gt;
&lt;span class="go"&gt;  -S, --strings         perform strings dump&lt;/span&gt;
&lt;span class="go"&gt;  -T, --headtail        do head &amp;amp; tail&lt;/span&gt;
&lt;span class="go"&gt;  -v, --vbadecompress   VBA decompression&lt;/span&gt;
&lt;span class="go"&gt;  ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The answer to question number two is easy to spot.&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;What event is used to begin the execution of the macros?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I used a different tool for this particular question mostly because I knew that it already shows the information I need to answer the question. The tool is called &lt;code&gt;olevba&lt;/code&gt; which is part of the &lt;a href="https://github.com/decalage2/oletools"&gt;oletools&lt;/a&gt; package of Python tools. &lt;em&gt;Olevba&lt;/em&gt; is used for extracting and analyzing VBA macro source code for MS Office documents.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;olevba sample.bin
&lt;span class="go"&gt;+----------+--------------------+---------------------------------------------+&lt;/span&gt;
&lt;span class="go"&gt;|Type      |Keyword             |Description                                  |&lt;/span&gt;
&lt;span class="go"&gt;+----------+--------------------+---------------------------------------------+&lt;/span&gt;
&lt;span class="go"&gt;|AutoExec  |Document_open       |Runs when the Word or Publisher document is  |&lt;/span&gt;
&lt;span class="go"&gt;|          |                    |opened                                       |&lt;/span&gt;
&lt;span class="go"&gt;|Suspicious|Create              |May execute file or a system command through |&lt;/span&gt;
&lt;span class="go"&gt;|          |                    |WMI                                          |&lt;/span&gt;
&lt;span class="go"&gt;|Suspicious|showwindow          |May hide the application                     |&lt;/span&gt;
&lt;span class="go"&gt;|Suspicious|CreateObject        |May create an OLE object                     |&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="onto-the-main-event"&gt;Onto the main event&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;What malware family was this maldoc attempting to drop?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I figured that the way for me to determine the answer for the question above is to start investigating the macro codes included in the document.&lt;/p&gt;
&lt;p&gt;I knew from the previous question that the entry point to begin the execution of the macros is with the function &lt;code&gt;Document_open()&lt;/code&gt;. The next step is to look for this entry point and go through the code to understand what the macro is doing.&lt;/p&gt;
&lt;p&gt;To view the contents of a stream, I used the command below:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;oledump.py sample.bin -s &lt;span class="m"&gt;13&lt;/span&gt; -v
&lt;span class="go"&gt;Attribute VB_Name = &amp;quot;diakzouxchouz&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;Attribute VB_Base = &amp;quot;1Normal.ThisDocument&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;Attribute VB_GlobalNameSpace = False&lt;/span&gt;
&lt;span class="go"&gt;Attribute VB_Creatable = False&lt;/span&gt;
&lt;span class="go"&gt;Attribute VB_PredeclaredId = True&lt;/span&gt;
&lt;span class="go"&gt;Attribute VB_Exposed = True&lt;/span&gt;
&lt;span class="go"&gt;Attribute VB_TemplateDerived = True&lt;/span&gt;
&lt;span class="go"&gt;Attribute VB_Customizable = True&lt;/span&gt;
&lt;span class="go"&gt;Private Sub _&lt;/span&gt;
&lt;span class="go"&gt;Document_open()&lt;/span&gt;
&lt;span class="go"&gt;boaxvoebxiotqueb&lt;/span&gt;
&lt;span class="go"&gt;End Sub&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above output, I saw that &lt;code&gt;Document_open()&lt;/code&gt; contains a single line of code which is a call to function &lt;code&gt;boaxvoebxiotqueb'&lt;/code&gt;. This function is included in stream &lt;code&gt;15&lt;/code&gt; which can be viewed with the command:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ oledump.py sample.bin -s &lt;span class="m"&gt;13&lt;/span&gt; -v
Attribute &lt;span class="nv"&gt;VB_Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;govwiahtoozfaid&amp;quot;&lt;/span&gt;
Function boaxvoebxiotqueb&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="nv"&gt;gooykadheoj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Chr&lt;span class="o"&gt;(&lt;/span&gt;roubhaol.Zoom + Int&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt; * &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
Dim c7�ATOQe2�j As Integer
c7�ATOQe2�j &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;
Do While c7�ATOQe2�j &amp;lt; &lt;span class="m"&gt;6&lt;/span&gt; + &lt;span class="m"&gt;2&lt;/span&gt;
c7�ATOQe2�j &lt;span class="o"&gt;=&lt;/span&gt; c7�ATOQe2�j + &lt;span class="m"&gt;5&lt;/span&gt;: DoEvents
Loop
&lt;span class="nv"&gt;haothkoebtheil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqw2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqin2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqm2342772g3&amp;amp;*gs7712ffvs626fqgm2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqt2342772g3&amp;amp;*gs7712ffvs626fq&amp;quot;&lt;/span&gt; + gooykadheoj + &lt;span class="s2"&gt;&amp;quot;2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fq:w2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqin2342772g3&amp;amp;*gs7712ffvs626fq322342772g3&amp;amp;*gs7712ffvs626fq_2342772g3&amp;amp;*gs7712ffvs626fq&amp;quot;&lt;/span&gt; + roubhaol.joefwoefcheaw + &lt;span class="s2"&gt;&amp;quot;2342772g3&amp;amp;*gs7712ffvs626fqr2342772g3&amp;amp;*gs7712ffvs626fqo2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqc2342772g3&amp;amp;*gs7712ffvs626fqes2342772g3&amp;amp;*gs7712ffvs626fqs2342772g3&amp;amp;*gs7712ffvs626fq&amp;quot;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above output contains more lines of what looks like gibberish code. Upon further inspection I realized that it's actually obfuscated. I can see common coding patterns which tells me that I could make sense of the code if I step through it and organize it so it is easy to understand.&lt;/p&gt;
&lt;p&gt;The first line of the &lt;code&gt;boaxvoebxiotqueb&lt;/code&gt; shows:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gooykadheoj = Chr(roubhaol.Zoom + Int(5 * 3))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What's &lt;code&gt;roubhaol&lt;/code&gt;? Since this is the first line in the function, I know that it is not a locally defined variable. It must be declared somplace else.&lt;/p&gt;
&lt;p&gt;After looking around I learned that &lt;code&gt;roubhaol&lt;/code&gt; is a the name of the user form at stream &lt;em&gt;16&lt;/em&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;16: m    1187 &amp;#39;Macros/VBA/roubhaol&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So the next step is figuring out what &lt;code&gt;roubhaol.Zoom&lt;/code&gt;'s value is. This value is not set anywhere in any of the macros by code. This means that the value is set in the form itself. To confirm, I opened up the Word document, pressed &lt;code&gt;Alt+F11&lt;/code&gt; to open up the Visual Basic editor and then opened the &lt;code&gt;roubhaol&lt;/code&gt; form. At the bottom we see that the value of &lt;code&gt;Zoom&lt;/code&gt; is set to &lt;code&gt;100&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="maldoc101-writeup-01" src="http://www.accidentalrebel.com/images/maldoc101-writeup-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;This means that by simulating the first line of code again we find that the variable &lt;code&gt;gooykadheoj&lt;/code&gt; gets the character value of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gooykadheoj = Chr(roubhaol.Zoom + Int(5 * 3))
gooykadheoj = Chr(100 + Int(5 * 3))
gooykadheoj = Chr(115)
gooykadheoj = Chr(115) # character &amp;quot;s&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I then proceeded to go through the next set of lines.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;Dim&lt;/span&gt; &lt;span class="nv"&gt;c7&lt;/span&gt;�&lt;span class="nv"&gt;ATOQe2&lt;/span&gt;�&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="nv"&gt;As&lt;/span&gt; &lt;span class="nv"&gt;Integer&lt;/span&gt;
&lt;span class="nv"&gt;c7&lt;/span&gt;�&lt;span class="nv"&gt;ATOQe2&lt;/span&gt;�&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="k"&gt;Do&lt;/span&gt; &lt;span class="k"&gt;While&lt;/span&gt; &lt;span class="nv"&gt;c7&lt;/span&gt;�&lt;span class="nv"&gt;ATOQe2&lt;/span&gt;�&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nv"&gt;c7&lt;/span&gt;�&lt;span class="nv"&gt;ATOQe2&lt;/span&gt;�&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;c7&lt;/span&gt;�&lt;span class="nv"&gt;ATOQe2&lt;/span&gt;�&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;: &lt;span class="nv"&gt;DoEvents&lt;/span&gt;
&lt;span class="k"&gt;Loop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This one is easier to simulate. &lt;code&gt;c7�ATOQe2�j&lt;/code&gt; is assigend 6. And then there's a loop that adds &lt;code&gt;5&lt;/code&gt; that eventually results to the value of &lt;code&gt;16&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But wait, something is fishy here. The variable &lt;code&gt;c7�ATOQe2�j&lt;/code&gt; is not found anywhere else after the block of code above. This tells us that this is just junk code that does not really do anything aside from waste an analyst's time! Sneaky sneaky.&lt;/p&gt;
&lt;p&gt;To save me the time I proceeded to remove all junk code. I did this by going through each variables and seeing if they are used somewhere useful. If not, then they are safe to remove.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;Attribute&lt;/span&gt; &lt;span class="nv"&gt;VB_Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;govwiahtoozfaid&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;Function&lt;/span&gt; &lt;span class="nv"&gt;boaxvoebxiotqueb&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;gooykadheoj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Chr&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;roubhaol&lt;/span&gt;.&lt;span class="nv"&gt;Zoom&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;

    &lt;span class="nv"&gt;haothkoebtheil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqw2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqin2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqm2342772g3&amp;amp;*gs7712ffvs626fqgm2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqt2342772g3&amp;amp;*gs7712ffvs626fq&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;gooykadheoj&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fq:w2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqin2342772g3&amp;amp;*gs7712ffvs626fq322342772g3&amp;amp;*gs7712ffvs626fq_2342772g3&amp;amp;*gs7712ffvs626fq&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;roubhaol&lt;/span&gt;.&lt;span class="nv"&gt;joefwoefcheaw&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;2342772g3&amp;amp;*gs7712ffvs626fqr2342772g3&amp;amp;*gs7712ffvs626fqo2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqc2342772g3&amp;amp;*gs7712ffvs626fqes2342772g3&amp;amp;*gs7712ffvs626fqs2342772g3&amp;amp;*gs7712ffvs626fq&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

    &lt;span class="nv"&gt;deulsaocthuul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;juuvzouchmiopxeox&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;haothkoebtheil&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;

    &lt;span class="nv"&gt;Set&lt;/span&gt; &lt;span class="nv"&gt;tiajriokchaoy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;CreateObject&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;deulsaocthuul&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;

    &lt;span class="nv"&gt;deaknaugthein&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;roubhaol&lt;/span&gt;.&lt;span class="nv"&gt;kaizseah&lt;/span&gt;.&lt;span class="nv"&gt;ControlTipText&lt;/span&gt;
    &lt;span class="nv"&gt;giakfeiw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;deulsaocthuul&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;gooykadheoj&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;roubhaol&lt;/span&gt;.&lt;span class="nv"&gt;paerwagyouqumeid&lt;/span&gt;.&lt;span class="nv"&gt;ControlTipText&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;deaknaugthein&lt;/span&gt;
    &lt;span class="nv"&gt;queegthaen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;giakfeiw&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;roubhaol&lt;/span&gt;.&lt;span class="nv"&gt;joefwoefcheaw&lt;/span&gt;

    &lt;span class="nv"&gt;Set&lt;/span&gt; &lt;span class="nv"&gt;deavjoajsear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;luumlaud&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;queegthaen&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;

    &lt;span class="nv"&gt;xve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Array&lt;/span&gt; &lt;span class="nv"&gt;_&lt;/span&gt;
        &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;1234444123&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;tiajriokchaoy&lt;/span&gt;. &lt;span class="nv"&gt;_&lt;/span&gt;
        &lt;span class="nv"&gt;Create&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;geulgelquuuj&lt;/span&gt;, &lt;span class="nv"&gt;kaenhaig&lt;/span&gt;, &lt;span class="nv"&gt;deavjoajsear&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;9938723&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="nv"&gt;Function&lt;/span&gt;

&lt;span class="nv"&gt;Function&lt;/span&gt; &lt;span class="nv"&gt;juuvzouchmiopxeox&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;yiajthoavheiw&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;geutyoeytiestheug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;yiajthoavheiw&lt;/span&gt;
    &lt;span class="nv"&gt;feaxgeip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Split&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;geutyoeytiestheug&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;2342772g3&amp;amp;*gs7712ffvs626fq&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;

    &lt;span class="nv"&gt;jaquhoiqu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;csqw&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;Join&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;feaxgeip&lt;/span&gt;, &lt;span class="nv"&gt;eihnx&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;juuvzouchmiopxeox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;jaquhoiqu&lt;/span&gt;
&lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="nv"&gt;Function&lt;/span&gt;

&lt;span class="nv"&gt;Function&lt;/span&gt; &lt;span class="nv"&gt;geulgelquuuj&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;sjiqw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;roubhaol&lt;/span&gt;.&lt;span class="nv"&gt;gaoddaicsauktheb&lt;/span&gt;.&lt;span class="nv"&gt;Pages&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;.&lt;span class="nv"&gt;ControlTipText&lt;/span&gt;
    &lt;span class="nv"&gt;geulgelquuuj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;juuvzouchmiopxeox&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sjiqw&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="nv"&gt;Function&lt;/span&gt;

&lt;span class="nv"&gt;Function&lt;/span&gt; &lt;span class="nv"&gt;luumlaud&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;zeolkaepxoag&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;Set&lt;/span&gt; &lt;span class="nv"&gt;luumlaud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;CreateObject&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;zeolkaepxoag&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;Dim&lt;/span&gt; &lt;span class="nv"&gt;vPu&lt;/span&gt; &lt;span class="nv"&gt;As&lt;/span&gt; &lt;span class="nv"&gt;String&lt;/span&gt;
    &lt;span class="nv"&gt;vPu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Replace&lt;/span&gt;$&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;BenqV1�igVwifwdQq&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;BenqV1�i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;on5�&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;luumlaud&lt;/span&gt; &lt;span class="nv"&gt;_&lt;/span&gt;
        . &lt;span class="nv"&gt;_&lt;/span&gt;
        &lt;span class="nv"&gt;showwindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mujgoiy&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;jioyseertioch&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;neivberziok&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;xuajroegquoudcaij&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="nv"&gt;Function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see above, the code is shorter. It's also a little easier to understand. Only a little though, we still need to step through the code carefully to have a better grasp of what it is doing.&lt;/p&gt;
&lt;p&gt;Let's take on the next line:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;haothkoebtheil = &amp;quot;2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqw2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqin2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqm2342772g3&amp;amp;*gs7712ffvs626fqgm2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqt2342772g3&amp;amp;*gs7712ffvs626fq&amp;quot; + gooykadheoj + &amp;quot;2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fq:w2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqin2342772g3&amp;amp;*gs7712ffvs626fq322342772g3&amp;amp;*gs7712ffvs626fq_2342772g3&amp;amp;*gs7712ffvs626fq&amp;quot; + roubhaol.joefwoefcheaw + &amp;quot;2342772g3&amp;amp;*gs7712ffvs626fqr2342772g3&amp;amp;*gs7712ffvs626fqo2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqc2342772g3&amp;amp;*gs7712ffvs626fqes2342772g3&amp;amp;*gs7712ffvs626fqs2342772g3&amp;amp;*gs7712ffvs626fq&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we look at the string carefully we would notice that a set of strings is concatenated with two variables. These variables are &lt;code&gt;gooykadheoj&lt;/code&gt; and &lt;code&gt;roubhaol.joefwoefcheaw&lt;/code&gt;. We already know the value of &lt;code&gt;gooykadheoj&lt;/code&gt;. So what's the value of &lt;code&gt;roubhaol.joefwoefcheaw&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;I got this value by going back to Visual Basic Editor and selelecting &lt;code&gt;joefwoefcheaw&lt;/code&gt;. The value we need is listed under &lt;code&gt;Text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="maldoc101-writeup-02" src="http://www.accidentalrebel.com/images/maldoc101-writeup-02.png" /&gt;&lt;/p&gt;
&lt;p&gt;Substituting the values &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;P&lt;/code&gt; I got the following:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;haothkoebtheil = &amp;quot;2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqw2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqin2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqm2342772g3&amp;amp;*gs7712ffvs626fqgm2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqt2342772g3&amp;amp;*gs7712ffvs626fqs2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fq:w2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqin2342772g3&amp;amp;*gs7712ffvs626fq322342772g3&amp;amp;*gs7712ffvs626fq_2342772g3&amp;amp;*gs7712ffvs626fqP2342772g3&amp;amp;*gs7712ffvs626fqr2342772g3&amp;amp;*gs7712ffvs626fqo2342772g3&amp;amp;*gs7712ffvs626fq2342772g3&amp;amp;*gs7712ffvs626fqc2342772g3&amp;amp;*gs7712ffvs626fqes2342772g3&amp;amp;*gs7712ffvs626fqs2342772g3&amp;amp;*gs7712ffvs626fq&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It still doesn't clear up the gibberish, but at least it's now one big string. This same string is then passed as a parameter to function &lt;code&gt;juuvzouchmiopxeox&lt;/code&gt;. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;deulsaocthuul = juuvzouchmiopxeox(haothkoebtheil)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's look at the code inside &lt;code&gt;juuvzouchmiopxeox&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;Function&lt;/span&gt; &lt;span class="nv"&gt;juuvzouchmiopxeox&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;yiajthoavheiw&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;geutyoeytiestheug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;yiajthoavheiw&lt;/span&gt;
    &lt;span class="nv"&gt;feaxgeip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Split&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;geutyoeytiestheug&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;2342772g3&amp;amp;*gs7712ffvs626fq&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;

    &lt;span class="nv"&gt;jaquhoiqu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;csqw&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;Join&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;feaxgeip&lt;/span&gt;, &lt;span class="nv"&gt;eihnx&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;juuvzouchmiopxeox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;jaquhoiqu&lt;/span&gt;
&lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="nv"&gt;Function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Following the code we could see that the passed string is splitted using the call to the function &lt;code&gt;Split&lt;/code&gt; with the substring &lt;code&gt;2342772g3&amp;amp;*gs7712ffvs626fq&lt;/code&gt;. This simply means that the substring is removed from the input string. The result of &lt;code&gt;Split&lt;/code&gt; is then joined into one string using &lt;code&gt;Join&lt;/code&gt;. There are the variables &lt;code&gt;csqw&lt;/code&gt; and &lt;code&gt;eihnx&lt;/code&gt;, they don't alter the string as these variables are empty. &lt;/p&gt;
&lt;p&gt;At the end of this function the value of the passed string is now:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;winmgmts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;win32_Process&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aha! Something that is not gibberish for a change!&lt;/p&gt;
&lt;p&gt;Going back to the caller function, the result of &lt;code&gt;juuvzouchmiopxeox&lt;/code&gt; is saved to &lt;code&gt;deulsaocthuul&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    deulsaocthuul = juuvzouchmiopxeox(haothkoebtheil)

    Set tiajriokchaoy = CreateObject(deulsaocthuul)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After that an object is created out of &lt;code&gt;deaulsaocthuul&lt;/code&gt;, which we know contains &lt;code&gt;winmgmts:win32_Process&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Looking at &lt;a href="https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-process"&gt;the microsoft docs&lt;/a&gt; I find out that &lt;code&gt;The Win32_Process WMI class represents a process on an operating system.&lt;/code&gt;. Interesting.&lt;/p&gt;
&lt;h2 id="taking-a-step-back"&gt;Taking a step back&lt;/h2&gt;
&lt;p&gt;At this point there are already a number of questions that we could answer based on what we've done so far. Some are not yet answerable at the moment, however, so nothing left to do but to push forward. But that will be for the next part of this two part series.&lt;/p&gt;
&lt;p&gt;Until then, I'm taking a step back as I marvel at my progress. It wouldn't take long until all the pieces would fall into place.&lt;/p&gt;</content><category term="malware_analysis"></category><category term="re"></category><category term="malware_analysis"></category><category term="malware"></category></entry><entry><title>IOLI Crackme 0x02</title><link href="http://www.accidentalrebel.com/ioli-crackme-0x02.html" rel="alternate"></link><published>2021-03-06T10:34:00+08:00</published><updated>2021-03-06T10:34:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-03-06:/ioli-crackme-0x02.html</id><content type="html">&lt;p&gt;I am continuing my reverse engineering review by tackling the &lt;em&gt;IOLI crackmes&lt;/em&gt; by &lt;a href="https://twitter.com/pof"&gt;@pof&lt;/a&gt;. These are beginner friendly challenges that is perfect for newbies or for those who want to review the basics like me. Check out my writeups for &lt;a href="http://www.accidentalrebel.com/ioli-crackme-0x00.html"&gt;0x00&lt;/a&gt; and &lt;a href="http://www.accidentalrebel.com/ioli-crackme-0x01.html"&gt;0x01&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="getting-the-password"&gt;Getting the password&lt;/h1&gt;
&lt;p&gt;After the first two challenges I kinda know what to expect already so I skipped running the program and immediately loaded it in IDA.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x02-01" src="http://www.accidentalrebel.com/images/ioli-crackme-0x02-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;So the lines leading to the comparison command now looks more complicated than before. We could easily see that there are some computations that happens thanks to the presence of &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;imul&lt;/code&gt;. Before those, we have two values (&lt;code&gt;5Ah&lt;/code&gt; and &lt;code&gt;1ECh&lt;/code&gt;) which we can easily guess are the values that will be worked on by these arithmetic functions.&lt;/p&gt;
&lt;p&gt;So going through the lines sequentially we can see that the two numbers are first added with &lt;code&gt;add [eax], edx&lt;/code&gt;. Which results in a value of &lt;code&gt;246h&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After that we see the line &lt;code&gt;imul eax, [ebp+var_8]&lt;/code&gt;, which if you follow the sequence closely effectively multiplies &lt;code&gt;246h&lt;/code&gt; by itself, resulting in a value of &lt;code&gt;52B24h&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Convert &lt;code&gt;52B24h&lt;/code&gt; to decimal equates to &lt;code&gt;338724&lt;/code&gt;, which is unsprisingly the password that we need.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x02-02" src="http://www.accidentalrebel.com/images/ioli-crackme-0x02-02.png" /&gt;&lt;/p&gt;
&lt;h1 id="confirming-via-dynamic-analysis"&gt;Confirming via dynamic analysis&lt;/h1&gt;
&lt;p&gt;What we did above is that we used static analysis to inspect the program line by line to determine the final computed password value. Let's use dynamic analysis and step through the code to see how our data is manipulated in memory during this process.&lt;/p&gt;
&lt;p&gt;Let's set a breakpoint immediately after the initial two values are loaded into memory.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x02-03" src="http://www.accidentalrebel.com/images/ioli-crackme-0x02-03.png" /&gt;&lt;/p&gt;
&lt;p&gt;If we look at the memory locations we would see the following:&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x02-04" src="http://www.accidentalrebel.com/images/ioli-crackme-0x02-04.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;epb+var_8&lt;/code&gt; points to &lt;code&gt;28FF40&lt;/code&gt; which now contains &lt;code&gt;5Ah&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ebp+var_C&lt;/code&gt; points to &lt;code&gt;28FF3C&lt;/code&gt; which now contains &lt;code&gt;1ECh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Stepping through the code and checking the memory location after &lt;code&gt;add [eax], edx&lt;/code&gt; shows that the result &lt;code&gt;246h&lt;/code&gt; is saved at memory location &lt;code&gt;28FF40&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x02-05" src="http://www.accidentalrebel.com/images/ioli-crackme-0x02-05.png" /&gt;&lt;/p&gt;
&lt;p&gt;Then after &lt;code&gt;imul eax, [ebp+var_8]&lt;/code&gt; we see that eax now holds the value of &lt;code&gt;52B24h&lt;/code&gt;, confirming the final computed value that we had from our static analysis.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x02-06" src="http://www.accidentalrebel.com/images/ioli-crackme-0x02-06.png" /&gt;&lt;/p&gt;
&lt;h1 id="patching-the-executables"&gt;Patching the executables&lt;/h1&gt;
&lt;p&gt;Patching the executable is actually the same process as &lt;a href="http://www.accidentalrebel.com/ioli-crackme-0x00.html"&gt;my writeup for 0x00&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="on-to-the-next-challenge"&gt;On to the next challenge...&lt;/h1&gt;
&lt;p&gt;While the challenge is still easy, we can see that the complexity is slowly ramping up from previous challenges. We also took the time to confirm the result of our static analysis by debugging and stepping through the code. This is a good practice for me to familiarize myself with IDA, which I hope I could use in future challenges.&lt;/p&gt;</content><category term="re"></category><category term="re"></category><category term="crackme"></category></entry><entry><title>Introducing shcode2exe</title><link href="http://www.accidentalrebel.com/introducing-shcode2exe.html" rel="alternate"></link><published>2021-02-26T07:34:00+08:00</published><updated>2021-02-26T07:34:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-02-26:/introducing-shcode2exe.html</id><content type="html">&lt;p&gt;&lt;strong&gt;[Edit: shcode2exe is &lt;a href="https://docs.remnux.org/discover-the-tools/dynamically+reverse-engineer+code/shellcode#shcode-2-exe"&gt;now part of Remnux&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I've been playing around with &lt;a href="https://remnux.org/"&gt;Remnux&lt;/a&gt; and encountered a problem trying to get one of the tools to run properly. The tool is &lt;a href="https://github.com/repnz/shellcode2exe"&gt;shellcode2exe&lt;/a&gt;, it is used to compile binary shellcode to a file so it can easily be debugged by a debugger.&lt;/p&gt;
&lt;p&gt;When I checked out the code, I was surprised to find out how simple it is. Basically, what happens is that the inputted shellcode is added to a barebones assembly file using the &lt;code&gt;incbin&lt;/code&gt; assembly instruction. From there, the file is then automatically compiled and linked.&lt;/p&gt;
&lt;p&gt;One big problem with the tool is that it needs to use &lt;a href="https://www.winehq.org/"&gt;Wine&lt;/a&gt; if it needs to run on Linux. I don't want such a huge dependency especially for my own malware analysis lab so I decided to write my own version which have led to the creation of &lt;code&gt;shcode2exe&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="shcode2exe"&gt;shcode2exe&lt;/h2&gt;
&lt;p&gt;While similar in functionality with the original tool, the biggest improvement I made is that it it does not depend on Wine along with other features as listed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can accept a shellcode blob or string (String format &lt;code&gt;\x5e\x31&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Can target both 32bit or 64bit Windows architecture. &lt;/li&gt;
&lt;li&gt;Cross platform. Works on Linux or Windows.&lt;/li&gt;
&lt;li&gt;No dependency on Wine when running on Linux&lt;/li&gt;
&lt;li&gt;Tested working with Python v3.3 and above&lt;/li&gt;
&lt;li&gt;Tested working on Windows 7 (Non SP1) and above&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;p&gt;Here's the help message for the tool:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;usage: shcode2exe.py [-h] [-o OUTPUT] [-s] [-a {32,64}] input&lt;/span&gt;

&lt;span class="go"&gt;Compile a binary shellcode blob into an exe file. Can target both 32bit or 64bit architecture.&lt;/span&gt;

&lt;span class="go"&gt;positional arguments:&lt;/span&gt;
&lt;span class="go"&gt;  input                 The input file containing the shellcode.&lt;/span&gt;

&lt;span class="go"&gt;optional arguments:&lt;/span&gt;
&lt;span class="go"&gt;  -h, --help            show this help message and exit&lt;/span&gt;
&lt;span class="go"&gt;  -o OUTPUT, --output OUTPUT&lt;/span&gt;
&lt;span class="go"&gt;                        Set output exe file.&lt;/span&gt;
&lt;span class="go"&gt;  -s, --string          Set if input file contains shellcode in string format.&lt;/span&gt;
&lt;span class="go"&gt;  -a {32,64}, --architecture {32,64}&lt;/span&gt;
&lt;span class="go"&gt;                        The windows architecture to use&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's how to load a file with shellcode in the format of a string&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;cat test.txt
&lt;span class="go"&gt;\x5e\x31\xc0\xb0\x24\xcd\x80\xb0\x24\xcd\x80\xb0\x58\xbb\xad\xde\xe1\xfe\xb9\x69\x19\x12\x28\xba\x67\x45\x23\x01\xcd\x80&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;./shcode2exe.py -s -o test-string.exe test.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Load a file with shellcode in the format of a blob&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./shcode2exe.py -o test-blob.exe test.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Use 64 bit architecture for the output (32 bit is the default)&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./shcode2exe.py -o test-blob.exe -a &lt;span class="m"&gt;64&lt;/span&gt; test.bin
&lt;span class="gp"&gt;$ &lt;/span&gt;file test-blob.exe
&lt;span class="go"&gt;test-blob.exe: PE32+ executable (console) x86-64 (stripped to external PDB), for MS Windows&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="next-steps"&gt;Next steps&lt;/h2&gt;
&lt;p&gt;I decided to reach out to the people behind Remnux to ask if they could consider my tool as a replacement on their platform. It would be great if they would, but it's okay too if they don't, I made it for my own use anyway. (Update 2021-02-07: It's now &lt;a href="https://github.com/REMnux/salt-states/issues/169"&gt;under review&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;For more information about the tool and it's code, go to &lt;a href="https://github.com/accidentalrebel/shcode2exe"&gt;it's Github page&lt;/a&gt;. If you have any comments or suggestions on how to improve it, feel free to tell me via Github issues or dm me at &lt;a href="https://twitter.com/accidentalrebel"&gt;@accidentalrebel&lt;/a&gt;.&lt;/p&gt;</content><category term="tools"></category><category term="re"></category><category term="tools"></category><category term="malware_analysis"></category></entry><entry><title>IOLI Crackme 0x01</title><link href="http://www.accidentalrebel.com/ioli-crackme-0x01.html" rel="alternate"></link><published>2021-02-20T17:34:00+08:00</published><updated>2021-02-20T17:34:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-02-20:/ioli-crackme-0x01.html</id><content type="html">&lt;p&gt;I am continuing my reverse engineering review by tackling the &lt;em&gt;IOLI crackmes&lt;/em&gt; by &lt;a href="https://twitter.com/pof"&gt;@pof&lt;/a&gt;. These are beginner friendly challenges that is perfect for newbies or for those who want to review the basics like me. Check out my writeup for 0x00 &lt;a href="http://www.accidentalrebel.com/ioli-crackme-0x00.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="getting-the-password"&gt;Getting the password&lt;/h1&gt;
&lt;p&gt;Of course, the first thing we do is run the program.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x01-01" src="http://www.accidentalrebel.com/images/ioli-crackme-0x01-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;Just like last time, we opened up the program in IDA and focused on the part of the code that does the comparing of passwords.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x01-02" src="http://www.accidentalrebel.com/images/ioli-crackme-0x01-02.png" /&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;ebp&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="no"&gt;var_4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;149&lt;/span&gt;&lt;span class="no"&gt;Ah&lt;/span&gt;
&lt;span class="nf"&gt;jz&lt;/span&gt; &lt;span class="no"&gt;short&lt;/span&gt; &lt;span class="no"&gt;loc_40137c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This seems easy enough. &lt;/p&gt;
&lt;p&gt;Initially I entered &lt;code&gt;149A&lt;/code&gt; as the password but this turned out to be incorrect. The reason for this is because &lt;code&gt;scanf&lt;/code&gt; was passed a format of &lt;em&gt;"%d"&lt;/em&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;esp&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="no"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="no"&gt;offset&lt;/span&gt; &lt;span class="no"&gt;aD&lt;/span&gt; &lt;span class="c1"&gt;; &amp;quot;%d&amp;quot;&lt;/span&gt;
&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="no"&gt;_scanf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This means that the input it expects is actually a decimal integer. So converting &lt;code&gt;149A&lt;/code&gt; to decimal results in &lt;code&gt;5274&lt;/code&gt;, which is the correct password.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x01-03" src="http://www.accidentalrebel.com/images/ioli-crackme-0x01-03.png" /&gt;&lt;/p&gt;
&lt;h1 id="patching-the-executables"&gt;Patching the executables&lt;/h1&gt;
&lt;p&gt;Patching the executable is actually the same process as &lt;a href="http://www.accidentalrebel.com/ioli-crackme-0x00.html"&gt;my writeup for 0x00&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="passing-arguments-to-functions"&gt;Passing arguments to functions&lt;/h1&gt;
&lt;p&gt;Since the crackme was cracked relatively quickly I want to review and highlight how arguments are passed to functions. &lt;/p&gt;
&lt;p&gt;The format of the &lt;code&gt;scanf&lt;/code&gt; function in C is like so:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;scanf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's an example of how it is used:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;scanf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we look at the 0x01 program we could see how the arguments are passed to the &lt;em&gt;_scanf&lt;/em&gt; function by placing the data to send on top of the stack.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;lea&lt;/span&gt; &lt;span class="no"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;ebp&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="no"&gt;var_4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;esp&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="no"&gt;var_14&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="no"&gt;eax&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;esp&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="no"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="no"&gt;offset&lt;/span&gt; &lt;span class="no"&gt;aD&lt;/span&gt;&lt;span class="c1"&gt;;  &amp;quot;%d&amp;quot;&lt;/span&gt;
&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="no"&gt;_scanf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;lea eax, [ebp+var_4]&lt;/code&gt; gets the address of &lt;em&gt;var_4&lt;/em&gt;, this is the memory location where scanf would put the inputted data. This is then added to the stack with &lt;code&gt;mov [esp+18h+var_14]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;offset aD&lt;/code&gt; gets the address of &lt;code&gt;aD&lt;/code&gt; which contains the string &lt;em&gt;"%d"&lt;/em&gt;. This is the &lt;em&gt;format&lt;/em&gt; parameter that &lt;em&gt;scanf&lt;/em&gt; expects. This is then added to the stack with &lt;code&gt;mov [esp+18h+Format]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the two parameters added to the stack, it can now be used by the &lt;em&gt;scanf&lt;/em&gt; function when &lt;code&gt;call _scanf&lt;/code&gt; is executed.&lt;/p&gt;
&lt;p&gt;I'm not sure if I was able to explain that properly. At the very least, you should have been able to have a basic idea of how variables are passed to functions. Take note, however, that there are other calling conventions for functions which meants that the passing of arguments can also differ.&lt;/p&gt;
&lt;h1 id="on-to-the-next-challenge"&gt;On to the next challenge...&lt;/h1&gt;
&lt;p&gt;This is the second challenge out of 10 in the IOLI series of challenges. So far the challenges are still very easy, which is fine because it's still good for practice. I look forward to the next one.&lt;/p&gt;</content><category term="re"></category><category term="re"></category><category term="crackme"></category></entry><entry><title>IOLI Crackme 0x00</title><link href="http://www.accidentalrebel.com/ioli-crackme-0x00.html" rel="alternate"></link><published>2021-02-16T21:55:00+08:00</published><updated>2021-02-16T21:55:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-02-16:/ioli-crackme-0x00.html</id><content type="html">&lt;p&gt;I am re-familiarizing myself with reverse engineering again by going through some simple crackme challenges. This one is called the IOLI Crackmes by pof. The goal is to find the correct password and also to patch it so that it can accept any input and still show that it's correct.&lt;/p&gt;
&lt;h2 id="getting-the-password"&gt;Getting the password&lt;/h2&gt;
&lt;p&gt;Running the program shows a password prompt. &lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x00-03" src="http://www.accidentalrebel.com/images/ioli-crackme-0x00-03.png" /&gt;&lt;/p&gt;
&lt;p&gt;Of course, randomly entering passwords is going to be a waste of time so I opened up IDA to look at its code.&lt;/p&gt;
&lt;p&gt;I knew that whatever password I enter in the program would be checked against the actual password. This is the part of the program that I should focus on so I scanned the code and found this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x00-02" src="http://www.accidentalrebel.com/images/ioli-crackme-0x00-02.png" /&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;esp&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="no"&gt;Str2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="no"&gt;offset&lt;/span&gt; &lt;span class="no"&gt;Str2&lt;/span&gt;&lt;span class="c1"&gt;; &amp;quot;250382&amp;quot;&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;esp&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="no"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="no"&gt;eax&lt;/span&gt;&lt;span class="c1"&gt;; &lt;/span&gt;
&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="no"&gt;_strcmp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And just from these few lines alone I already knew what the password is. IDA Pro was helpful enough to add a comment that &lt;code&gt;offset Str2&lt;/code&gt; equates to &lt;code&gt;250382&lt;/code&gt;. Surely enough, this number was the password.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x00-04" src="http://www.accidentalrebel.com/images/ioli-crackme-0x00-04.png" /&gt;&lt;/p&gt;
&lt;h2 id="patching-the-executable"&gt;Patching the executable&lt;/h2&gt;
&lt;p&gt;The next part of the challenge is to patch the executable so that it can accept any input and would still allow us through.&lt;/p&gt;
&lt;p&gt;Looking at the graph view, we want the program to always go to the node on the right which has the "Password OK" message. &lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x00-05" src="http://www.accidentalrebel.com/images/ioli-crackme-0x00-05.png" /&gt;&lt;/p&gt;
&lt;p&gt;The line that we could change to allow us to do this would be this one:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;jz&lt;/span&gt; &lt;span class="no"&gt;short&lt;/span&gt; &lt;span class="no"&gt;loc_40138A&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;jz&lt;/code&gt; can be changed to a &lt;code&gt;jmp&lt;/code&gt; command by changing the op code. Opening up the "Patch Bytes" window while the line is highlighted would show us this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x00-06" src="http://www.accidentalrebel.com/images/ioli-crackme-0x00-06.png" /&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;74&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="n"&gt;C7&lt;/span&gt; &lt;span class="mf"&gt;04&lt;/span&gt; &lt;span class="mf"&gt;24&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="mf"&gt;40&lt;/span&gt; &lt;span class="mf"&gt;40&lt;/span&gt; &lt;span class="mf"&gt;00&lt;/span&gt; &lt;span class="n"&gt;E8&lt;/span&gt; &lt;span class="n"&gt;A8&lt;/span&gt; &lt;span class="mf"&gt;19&lt;/span&gt; &lt;span class="mf"&gt;00&lt;/span&gt; &lt;span class="mf"&gt;00&lt;/span&gt; &lt;span class="n"&gt;EB&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The opcode related to &lt;code&gt;jz short loc_40138A&lt;/code&gt; is the first two btyes &lt;code&gt;74 0E&lt;/code&gt;. &lt;code&gt;74&lt;/code&gt; is the "Jump short if equal" opcode and &lt;code&gt;0E&lt;/code&gt; is the relative jump distance. Changing &lt;code&gt;74&lt;/code&gt; to &lt;code&gt;EB&lt;/code&gt; converts it to the "Jump" opcode effectively making the line &lt;code&gt;jmp short loc_40138A&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x00-07" src="http://www.accidentalrebel.com/images/ioli-crackme-0x00-07.png" /&gt;&lt;/p&gt;
&lt;p&gt;After saving, IDA will automatically upgrade the graph. It will now show us that the flow of the program now jumps to the right node directly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x00-08" src="http://www.accidentalrebel.com/images/ioli-crackme-0x00-08.png" /&gt;&lt;/p&gt;
&lt;p&gt;All that is left to do is to patch the executable via "Edit &amp;gt; Patch Program &amp;gt; Apply patches to input file..." and run the program. From here, any entered password would automatically get accepted.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ioli-crackme-0x00-09" src="http://www.accidentalrebel.com/images/ioli-crackme-0x00-09.png" /&gt;&lt;/p&gt;
&lt;h2 id="on-to-the-next-challenge"&gt;On to the next challenge...&lt;/h2&gt;
&lt;p&gt;This is the first out of the 10 challenges from this set. Since this is the first one, it is only natural for it to be very easy. It's still a good refresher for me especially since the last time I did any reversing was from a few years ago. I look forward to the next challenges, I do hope that they would ramp up in difficulty and also teach me new things for me to improve.&lt;/p&gt;</content><category term="re"></category><category term="re"></category><category term="crackme"></category></entry><entry><title>Hunt the Kingdom CTF Challenge</title><link href="http://www.accidentalrebel.com/hunt-the-kingdom-ctf-challenge.html" rel="alternate"></link><published>2020-10-05T11:13:00+08:00</published><updated>2020-10-05T11:13:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2020-10-05:/hunt-the-kingdom-ctf-challenge.html</id><content type="html">&lt;blockquote&gt;
&lt;p&gt;TLDR: Participated in a blue team CTF, had a lot of fun, looking forward for more&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yesterday I participated in the &lt;a href="https://www.facebook.com/guidemtraining"&gt;GuideM "Hunt the Kingdom" CTF challenge&lt;/a&gt;. It served as the final activity at the end of the &lt;em&gt;"Cyber Defense and Threat Hunting"&lt;/em&gt; course.&lt;/p&gt;
&lt;p&gt;I was looking forward to this CTF, especially after my awesome experience with the &lt;a href="http://www.accidentalrebel.com/covidscammers-writeup--defcon-rtv-ctf.html"&gt;Red Team Village CTF at Defcon&lt;/a&gt;. This one is centered on the Blue Team side, and I was curious as to how it will play out.&lt;/p&gt;
&lt;h2 id="the-preparation"&gt;The Preparation&lt;/h2&gt;
&lt;p&gt;I took one whole day to study and prepare. I went through all our slides and have written down the important concepts and commands to an org file. This is important because I wanted them to be easily searchable, which helped a lot during the challenge.&lt;/p&gt;
&lt;p&gt;I also did research about the Hunt the Kingdom challenge itself. There weren't much information online about it but there were &lt;a href="https://www.facebook.com/guidemtraining/photos/a.142012317191141/229536238438748/"&gt;some social media posts&lt;/a&gt; that contained screenshots on how the challenge looked like. These gave me a lot of information on what to expect.&lt;/p&gt;
&lt;p&gt;&lt;img alt="hunt-the-kingdom-ctf-challenge-01" src="http://www.accidentalrebel.com/images/hunt-the-kingdom-ctf-challenge-01.jpg" /&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;It&amp;#39;s OSINT in practice :P
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For example, with the screenshot above I learned how the UI looked like, that there were categories that we could switch to, leaderboards, how a question is structured, and that "areas" on the map can get added, enabled, and disabled during the game. The last part is particularly important as it means that not all questions are available from the start and some can get disabled during the game.&lt;/p&gt;
&lt;p&gt;Thanks to the above research I felt confident that I could hit the ground running as soon as the game started. I picked my name (AccidentalRebel, of course) and my emblem and I was ready for the hunt.&lt;/p&gt;
&lt;p&gt;&lt;img alt="hunt-the-kingdom-ctf-challenge-02" src="http://www.accidentalrebel.com/images/hunt-the-kingdom-ctf-challenge-02.png" /&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Yes, that&amp;#39;s the blue tank from Advance Wars, because I&amp;#39;m part of the &amp;quot;blue team&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="the-hunt"&gt;The Hunt&lt;/h2&gt;
&lt;p&gt;When the hunt started my approach was to focus on the easy problems first. Getting them out of the way early would allow me to rack up points and just focus on the hard ones afterwards. This did the trick and I was able to maintain an early lead.&lt;/p&gt;
&lt;p&gt;During the mid-game my computer hanged from all the switching between VMs (There were 3 VMs that we needed to use to solve the problems). &lt;em&gt;Note to self: get a beefier PC&lt;/em&gt;. I got a bit frustrated by this but decided that instead of waiting for Windows to boot I could use the time to take a break and got lunch. &lt;/p&gt;
&lt;p&gt;&lt;img alt="hunt-the-kingdom-ctf-challenge-03" src="http://www.accidentalrebel.com/images/hunt-the-kingdom-ctf-challenge-03.53" /&gt;&lt;/p&gt;
&lt;p&gt;I came back to the game all full and refreshed, but sadly, I have already lost my lead. I felt a bit disappointed by this but I continued to push through. I removed the leaderboards to minimize distractions which helped. No need to pressure myself, I told myself. Although, I admit that I did peek from time to time.&lt;/p&gt;
&lt;p&gt;With the renewed focus I was able to keep my standing in the top 3. The leader of the pack during the end-game was &lt;em&gt;BoyHack3r&lt;/em&gt;, a worthy opponent who was always a few points ahead of me. &lt;/p&gt;
&lt;p&gt;There was one question that has a lot of points that only has one solve. I knew that if I could get that it would give me enough points to snatch back 1st place. It wasn't an easy problem though so I changed my approach by slowing down which helped me understand the questions better. A few minutes later I was back at first place.&lt;/p&gt;
&lt;p&gt;I've never done a celebratory fist pump before, this was the first time.&lt;/p&gt;
&lt;h2 id="the-final-minutes"&gt;The Final Minutes&lt;/h2&gt;
&lt;p&gt;I was able to maintain first place position by continuously answering questions until I was left with just four questions. These four are problems that no one has solved yet. The activity on the leaderboards have lessened which I took to mean that the others were stuck like me. I was at 13740 points, BoyHack3r at 13590, and Overwatch at 13460. If any of them managed to solve just one out of these four problems then they'll easily overtake me.&lt;/p&gt;
&lt;p&gt;I wasn't going to let that happen though. At 5 minutes left I continued solving the one that I had the most progress with. But it wasn't enough and I ran out of time. The others didn't get their lucky break either which finally cemented the scores on the boards.&lt;/p&gt;
&lt;p&gt;&lt;img alt="hunt-the-kingdom-ctf-challenge-04" src="http://www.accidentalrebel.com/images/hunt-the-kingdom-ctf-challenge-04.PNG" /&gt;&lt;/p&gt;
&lt;p&gt;After 6 hours of back-breaking hunting I was finally able to breathe a sigh of relief. &lt;/p&gt;
&lt;h2 id="the-end"&gt;The End&lt;/h2&gt;
&lt;p&gt;I rarely engage in any competitive activity so my competitive side rarely comes out. This CTF definitely brought it out and gave me the push to take the challenge seriously. I didn't do it for the prizes though. I did it because I wanted to prove to myself that I have what it takes, especially since I don't have a formal background in CyberSecurity. While a CTF is not an accurate qualification of being part of a blue team, it does show a participant's ability to work and solve problems under pressure.&lt;/p&gt;
&lt;p&gt;I want to give a shoutout to &lt;a href="https://www.facebook.com/guidemtraining"&gt;GuideM&lt;/a&gt; for guiding us throughout the course and for the extremely fun CTF challenge. Also to &lt;em&gt;BoyHack3r&lt;/em&gt;, &lt;em&gt;Overwatch&lt;/em&gt;, and &lt;em&gt;:]&lt;/em&gt; for making me sweat bullets.&lt;/p&gt;
&lt;p&gt;This is another big step for me into the world of cybersecurity and I do hope I could learn more and improve. I look forward to the next CTF!&lt;/p&gt;</content><category term="ctf"></category><category term="ctf"></category><category term="cybersecurity"></category></entry><entry><title>My experience with manufacturing printed circuit boards</title><link href="http://www.accidentalrebel.com/my-experience-manufacturing-printed-circuit-boards.html" rel="alternate"></link><published>2020-10-01T07:19:00+08:00</published><updated>2020-10-01T07:19:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2020-10-01:/my-experience-manufacturing-printed-circuit-boards.html</id><content type="html">&lt;p&gt;I've done a lot of electronics projects already, all of them were painstakingly hand-soldered on a perfboard. I actually like this approach for quick prototyping, and plus, I've also grown fond of how "raw" it looks like. In spite of this, I've always been curious and interested in having my own printed PCB. I remember designing one for my &lt;a href="https://hackaday.io/project/164144-tiro-vibrating-watch/log/161430-current-state-and-next-steps"&gt;TIRO vibrating watch&lt;/a&gt; but I never pushed through with it because I wasn't confident with what I've made.&lt;/p&gt;
&lt;p&gt;&lt;img alt="my-experience-manufacturing-printed-circuit-boards-01" src="http://www.accidentalrebel.com/images/my-experience-manufacturing-printed-circuit-boards-01.jpg" /&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;I really like the raw, almost electronic-punk look of my work
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A couple of months ago I got an email from &lt;a href="https://www.pcbway.com/"&gt;PCBWay&lt;/a&gt; asking if I was interested in trying out their PCB manufacturing service. The email from PCBWay re-ignited this interest in having a PCB made. The problem is I didn't have a PCB design that I built myself that I knew was going to work. My best option was the "ESPBoy project".&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://hackaday.io/project/164830-espboy-the-ultimate-multi-gadget"&gt;ESPBoy&lt;/a&gt; is a project by &lt;a href="https://hackaday.io/ESPboy.edu"&gt;RomanS&lt;/a&gt; that is touted to be the ultimate multi-gadget. RomanS sent me a kit a long time ago (Thank's again, RomanS). I have assembled and &lt;a href="https://www.youtube.com/watch?v=GIrp5Vpr2Ns&amp;amp;feature=emb_title"&gt;made a tutorial video&lt;/a&gt; for it which means that I know that it works and have a very good idea of how it is laid out.&lt;/p&gt;
&lt;p&gt;With that decided, having the PCB made was a very easy and quick process. I just uploaded the gerber file on the PCBWay website, waited for the review of the PCB to be finished, and in a few hours I clicked the submit button and it was off to the printers.&lt;/p&gt;
&lt;p&gt;Fast forward a few weeks later and the package with the printed pcbs arrived.&lt;/p&gt;
&lt;p&gt;&lt;img alt="my-experience-manufacturing-printed-circuit-boards-02" src="http://www.accidentalrebel.com/images/my-experience-manufacturing-printed-circuit-boards-02.jpg" /&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;And yes, I changed the color to red just so they would look different.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I must say that I am very impressed with the quality of the PCBs. The material feels really solid and the lines so fine and accurate. I've seen and held PCB etchings before, and this is like lightyears ahead in terms of quality. The same can be said with my hand soldered perfboards, of course.&lt;/p&gt;
&lt;p&gt;Sadly, these PCBs have been sitting in storage because I haven't found the time due to the baby. Thankfully, my schedule is slowly opening up recently and I plan to build one ESPBoy in the next coming weeks. I plan to remove the parts from the old one and put it on this. This newer PCB design has new features like the ability to connect to an app store (yeah, seriously) and I'm really curious to try it out.&lt;/p&gt;
&lt;p&gt;I also might consider having another PCB made, but this time with my own design. I'm thinking I might go ahead and have my TIRO watch made, or maybe something even simpler. We'll see.&lt;/p&gt;</content><category term="electronics"></category><category term="pcbs"></category><category term="electronics"></category></entry><entry><title>CovidScammers writeup (Defcon RTV CTF)</title><link href="http://www.accidentalrebel.com/covidscammers-writeup--defcon-rtv-ctf.html" rel="alternate"></link><published>2020-08-13T16:58:00+08:00</published><updated>2020-08-13T16:58:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2020-08-13:/covidscammers-writeup--defcon-rtv-ctf.html</id><content type="html">&lt;p&gt;I joined the &lt;a href="https://ctf.threatsims.com"&gt;Defcon Red Team Village CTF&lt;/a&gt; because I was curious about it and I wanted to test out the skills that I have gained playing with CTF sites like &lt;a href="https://overthewire.org/wargames/"&gt;overthewire.org&lt;/a&gt; and &lt;a href="https://www.vulnhub.com/"&gt;vulnhub&lt;/a&gt;. I knew that the challenges won't be easy, but thankfully, I was able to join up with other newbies who were willing to give it a go and learn with each other.&lt;/p&gt;
&lt;p&gt;Unfortunately, I fell asleep just before the CTF started and when I woke up all the easy challenges were already solved by my team members. There was one easy challenge that was still open on the CovidScammers category, so I quickly got started to solving that.&lt;/p&gt;
&lt;h2 id="free-flag-and-binary-1-point"&gt;Free Flag (and binary) [1 point]&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You've been contacted by a high-end but morally ambiguous finance company (unhackable-bitcoin-wallet.com) to investigate a data breach. The box in question is a mail server in their internal network, a sample of the malware found on the system has been pulled and given to you. Your task, should you choose to accept it, is to reverse-engineer the sample and locate, fuzz and exploit the C2 server, and then hack-back to learn about the malicious actor and recover the stolen documents.
Look for the free flag. Get on the scoreboard!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I admit that in a hurry to get points I did not properly read the description of the challenge. I understood that I'll be downloading and reverse-engineering something. But it did not register on my mind that it's actually malware.&lt;/p&gt;
&lt;p&gt;The download was a binary that doesn't do anything when run. My first instict was to use &lt;code&gt;strings&lt;/code&gt; to look for the flag, which turned out to be correct.&lt;/p&gt;
&lt;p&gt;&lt;img alt="giving-malware-to-a-noob--defcon-rtv-ctf-covidscammers-writeup-01" src="http://www.accidentalrebel.com/images/giving-malware-to-a-noob--defcon-rtv-ctf-covidscammers-writeup-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;The flag is: &lt;code&gt;TS{freeFlagLookAtMe}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, this challenge was already solved by a team member so I did not get the free flag. The second one, is still open though.&lt;/p&gt;
&lt;h2 id="syscalls-5-points"&gt;Syscalls [5 points]&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;What syscall is hindering your dynamic analysis? Flag is just the syscall, no brackets or anything.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we run the file from within gdb to debug it we get:&lt;/p&gt;
&lt;p&gt;&lt;img alt="giving-malware-to-a-noob--defcon-rtv-ctf-covidscammers-writeup-02" src="http://www.accidentalrebel.com/images/giving-malware-to-a-noob--defcon-rtv-ctf-covidscammers-writeup-02.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;can't debug this, na na na na...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So from the description we are looking for a syscall that is hindering the debugging of the binary. If we want to find out what syscalls are called by a program, we could determine that using the &lt;code&gt;strace&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;img alt="giving-malware-to-a-noob--defcon-rtv-ctf-covidscammers-writeup-03" src="http://www.accidentalrebel.com/images/giving-malware-to-a-noob--defcon-rtv-ctf-covidscammers-writeup-03.png" /&gt;&lt;/p&gt;
&lt;p&gt;Just before the write syscall for the "na na na" message we see:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ptrace(TRACE_TRACEME) = -1 EPERM (Operation not permitted)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm unfamiliar with &lt;code&gt;ptrace&lt;/code&gt; so I researched it and tried to understand how it could prevent debugging. I learned that &lt;code&gt;ptrace&lt;/code&gt; can be used as an anti-debugging technique as can be seen &lt;a href="https://www.aldeid.com/wiki/Ptrace-anti-debugging"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sure, enough the flag is: &lt;code&gt;ptrace&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;I got 5 points from this and I finally have a contribution to my team! Unfortunately, real life prevented me from continuing with the CTF and I had to bow out early.&lt;/p&gt;
&lt;h3 id="sidenote-how-to-bypass-ptrace"&gt;Sidenote: How to bypass ptrace?&lt;/h3&gt;
&lt;p&gt;How does one bypass this anti-debugging feature? &lt;a href="https://dev.to/denisnutiu/bypassing-ptrace-calls-with-ldpreload-on-linux-12jl"&gt;Here's one approach&lt;/a&gt; that I tried which should work in theory but doesn't. My guess is that this particular binary has an additional way to prevent debugging, like it spawns a child process and it stays there even if you bypass ptrace. I'd have to look into this further in the future.&lt;/p&gt;
&lt;h2 id="shared-secrets-150-points"&gt;Shared Secrets [150 points]&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The malware creates a shared-memory object and stores a flag inside. Recover the flag. Flag has the TS{} format, you'll know when you get it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was able to solve this challenge after the CTF preliminaries ended. By this time I was already well rested and have a clearer mind. It was also at this time that I realized that the file is actually a malware and has already infected my machine. Thankfully, I was running a virtual machine which meant I could just revert back to an old working restore point.&lt;/p&gt;
&lt;p&gt;Knowing that the file is a malware, the next step I did was to run &lt;code&gt;rkhunter&lt;/code&gt; to look for rootkits and suspcious files. This gave me an interesting finding:&lt;/p&gt;
&lt;p&gt;&lt;img alt="giving-malware-to-a-noob--defcon-rtv-ctf-covidscammers-writeup-04" src="http://www.accidentalrebel.com/images/giving-malware-to-a-noob--defcon-rtv-ctf-covidscammers-writeup-04.png" /&gt;&lt;/p&gt;
&lt;p&gt;Opening the suspicious file revealed this: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;KRJXW22FMVYES5CTMVBXERKUNNCWK4CJORJWCRTFFZGXERTSGBSE6IL5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is not the flag yet, it needs to be in the "TS{}" format as instructed in the challenge description.&lt;/p&gt;
&lt;p&gt;I initially had a hard time figuring out how to decode this. It wasn't &lt;code&gt;base64&lt;/code&gt; nor any other popular encoding. Thankfully, there are tools like &lt;a href="https://gchq.github.io/CyberChef/"&gt;CyberChef&lt;/a&gt; to help with this kind of problem. After some experimentation, the "magic" recipe did the trick and revealed to me that it was actually a &lt;code&gt;base32&lt;/code&gt; encoding.&lt;/p&gt;
&lt;p&gt;&lt;img alt="giving-malware-to-a-noob--defcon-rtv-ctf-covidscammers-writeup-05" src="http://www.accidentalrebel.com/images/giving-malware-to-a-noob--defcon-rtv-ctf-covidscammers-writeup-05.png" /&gt;&lt;/p&gt;
&lt;p&gt;This gave me the flag: &lt;code&gt;TS{kEepItSeCrETkEepItSaFe.MrFr0dO!}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="license-and-registration-100-points"&gt;License and Registration [100 points]&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The malware creates a UUID and stores it in a file, what is the name of this file. Provide the SHA1 hash of hte full path as the flag.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the description above says that a file is created by the malware and stores data inside of it. I figured that the easiest way to figure out what this created file is to: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Restore to a previous restore point before I opened the malware&lt;/li&gt;
&lt;li&gt;Run the malware, and then;&lt;/li&gt;
&lt;li&gt;Inspect which other files were created at the time of execution. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I found out which files were recently created during the last 2 minutes using the following command:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ find / -user kali -mmin &lt;span class="m"&gt;2&lt;/span&gt; -type f &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This showed me a lot of files, but after sifting through that I found one file that seesm promising.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/tmp/.serverauth.tn6aUcM0uM&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To get the flag I did this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;/tmp/.serverauth.tn6aUcM0uM&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sha1sum
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which resulted in this flag: &lt;code&gt;5b4e97047851682649a602ad62ba4af567e352a3&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="to-be-continued"&gt;To be continued?&lt;/h2&gt;
&lt;p&gt;So I wanted to try and work on the other challenges but it seems that &lt;a href="https://ctf.threatsims.com"&gt;the ctf site&lt;/a&gt; is currently down. The site redirected to a different non https site and it spooked me so I stopped trying. Good thing that I had NoScript on.&lt;/p&gt;
&lt;p&gt;If you want a longer and more pro writeup about the CovidScammers challenges do check out &lt;a href="https://0xdf.gitlab.io/2020/05/04/covid-19-ctf-covidscammers.html"&gt;0xdf's writeup about it&lt;/a&gt;.&lt;/p&gt;</content><category term="ctf"></category><category term="ctf"></category><category term="writeup"></category><category term="malware_analysis"></category><category term="defcon"></category></entry><entry><title>Study notes: MAC Spoofing</title><link href="http://www.accidentalrebel.com/study-notes--mac-spoofing.html" rel="alternate"></link><published>2020-08-01T11:07:00+08:00</published><updated>2020-08-01T11:07:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2020-08-01:/study-notes--mac-spoofing.html</id><content type="html">&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Study notes are my personal research notes on certain topics that interests me.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Any network capable device has a unique factory-assigned Media Access Control (MAC) address. Users have no way to change the MAC address but it can be done. However, it is possible to mask the MAC address and have it show a different value. This is called MAC spoofing.&lt;/p&gt;
&lt;p&gt;There are legitimate uses for MAC spoofing. For example, there may be certain applications that require a particular MAC address to work, or maybe your ISP expects a certain MAC address to connect to the network. MAC spoofing is largely used for illegitimate uses, like circumventing an access control list or getting past a filter on a wireless network.&lt;/p&gt;
&lt;h2 id="changing-mac-address-via-ifconfig"&gt;Changing MAC Address via ifconfig&lt;/h2&gt;
&lt;p&gt;In Linux we could use &lt;code&gt;ifconfig&lt;/code&gt; to change the MAC address.&lt;/p&gt;
&lt;p&gt;To view the current MAC address:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The current MAC address is &lt;code&gt;08:00:27:59:fb:fa&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="study-notes--mac-spoofing-01" src="http://www.accidentalrebel.com/images/study-notes--mac-spoofing-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;Let's say we want to change the MAC address of our interface (eth0) to &lt;code&gt;00:11:22:33:44:55&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, deactivate the interface.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ifconfig eth0 down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we specify the mac address that we want to change to.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ifconfig eth0 hw ether &lt;span class="m"&gt;00&lt;/span&gt;:11:22:33:44:55
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Reactive the interface:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ifconfig eth0 up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code&gt;ifconfig&lt;/code&gt; again to see the changes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="study-notes--mac-spoofing-02" src="http://www.accidentalrebel.com/images/study-notes--mac-spoofing-02.png" /&gt;&lt;/p&gt;
&lt;h3 id="note"&gt;NOTE:&lt;/h3&gt;
&lt;p&gt;These changes are not permanent. The MAC address will return to the original one when the system is restarted!&lt;/p&gt;
&lt;h2 id="changing-the-mac-address-via-macchanger"&gt;Changing the MAC address via MACChanger&lt;/h2&gt;
&lt;p&gt;There are various tools that allows easy changing of MAC addresses. &lt;a href="https://github.com/alobbs/macchanger"&gt;MACChanger&lt;/a&gt; is one of them.&lt;/p&gt;
&lt;p&gt;First, deactivate the interface.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ifconfig eth0 down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above below allows you specify the mac address you want to use:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ macchanger -m &lt;span class="m"&gt;00&lt;/span&gt;:11:22:33:44:55 eth0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code below assigns a random MAC address.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ macchanger -r eth0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Reactive the interface:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ifconfig eth0 up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="related-reading"&gt;Related reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/MAC_spoofing"&gt;MAC Spoofing on Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.giac.org/paper/gsec/3199/mac-spoofing-an-introduction/105315"&gt;MAC Spoofing - An introduction&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.comparitech.com/net-admin/spoofing-attacks-guide/"&gt;A guide to spoofing attacks and how to prevent them&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="cybersecurity"></category><category term="spoofing"></category><category term="cybersecurity"></category></entry><entry><title>Chicken-Scheme FFI Examples</title><link href="http://www.accidentalrebel.com/chicken-scheme-ffi-examples.html" rel="alternate"></link><published>2020-06-16T05:58:00+08:00</published><updated>2020-06-16T05:58:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2020-06-16:/chicken-scheme-ffi-examples.html</id><content type="html">&lt;p&gt;I'm currently working on refactoring the FFI implementation for &lt;a href="https://github.com/accidentalrebel/rebel-game-engine"&gt;the Rebel Game Engine&lt;/a&gt;. It was previously written using the &lt;a href="http://wiki.call-cc.org/eggref/5/bind"&gt;Bind chicken egg&lt;/a&gt; but I wanted to have more control over the implementation by using the low level foreign functions. &lt;/p&gt;
&lt;p&gt;To help me better understand I made some examples that has the basic FFI implementations that I'll be needing for my project.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="foreign-lambda-example"&gt;foreign-lambda example&lt;/h2&gt;
&lt;p&gt;Let's say we have a structure &lt;code&gt;Vec3&lt;/code&gt; and a function &lt;code&gt;Vec3Create&lt;/code&gt; that we want to access from chicken-scheme.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Vec3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;Vec3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Vec3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;Vec3Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Vec3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vec3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vec3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We could use &lt;a href="https://wiki.call-cc.org/man/5/Module%20(chicken%20foreign)#foreign-lambda"&gt;&lt;code&gt;foreign-lambda&lt;/code&gt;&lt;/a&gt; to bind to the function:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;vec3_create&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;foreign-lambda&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c-pointer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Vec3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c1"&gt;; Return type, a pointer to a struct object of Vec3&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;Vec3Create&amp;quot;&lt;/span&gt;                  &lt;span class="c1"&gt;; Name fo the function&lt;/span&gt;
    &lt;span class="nv"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;float&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;           &lt;span class="c1"&gt;; The three parameters (x,y,z) to pass to the function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This would allow us to call the &lt;code&gt;vec3_create&lt;/code&gt; function like so:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3_create&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt; &lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h2 id="foreign-lambda-example_1"&gt;foreign-lambda* example&lt;/h2&gt;
&lt;p&gt;Let's bind another C function &lt;code&gt;Vec3Print&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Vec3Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vec3&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Vec3 to print: (%f, %f, %f)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We could also use &lt;a href="https://wiki.call-cc.org/man/5/Module%20(chicken%20foreign)#foreign-lambda"&gt;&lt;code&gt;foreign-lambda*&lt;/code&gt;&lt;/a&gt; (Notice the asterisk). This is similar to &lt;code&gt;foreign-lambda&lt;/code&gt; but accepts C code as a string.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;vec3_print&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;foreign-lambda*&lt;/span&gt;
    &lt;span class="nv"&gt;void&lt;/span&gt;                          &lt;span class="c1"&gt;; The return type&lt;/span&gt;
    &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="nf"&gt;c-pointer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Vec3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;; The parameter to pass, a pointer to a Vec3 object&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;Vec3Print(*a0);&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;           &lt;span class="c1"&gt;; The C code in string from&lt;/span&gt;
                                  &lt;span class="c1"&gt;; Vec3Print accepts a non pointer, we dereference it&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3_print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3_create&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt; &lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c1"&gt;; Creates a vec3 and prints it&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h2 id="inline-c-code-in-foreign-lambda"&gt;Inline C code in foreign-lambda*&lt;/h2&gt;
&lt;p&gt;Here's another example using &lt;code&gt;foreign-lambda*&lt;/code&gt;. This time there is no predefined C function, but instead we define the code inside the lisp function's body.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;vec3_zero&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;foreign-lambda*&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c-pointer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Vec3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt;                            &lt;span class="c1"&gt;; Empty variables&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;Vec3* v = (Vec3*)Vec3Create(0.0f, 0.0f, 0.0f); &lt;/span&gt;
&lt;span class="s"&gt;    C_return(v);&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;               &lt;span class="c1"&gt;; Instead of &amp;quot;return&amp;quot;, we use &amp;quot;C_return&amp;quot;.&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3_print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3_zero&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;          &lt;span class="c1"&gt;; Calls vec3_zero and prints the returned Vec3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that due to obscure technical reasons &lt;code&gt;C_return&lt;/code&gt; must be used instead of &lt;code&gt;return&lt;/code&gt; when returning a value. More info about this &lt;a href="https://wiki.call-cc.org/man/5/Module%20(chicken%20foreign)#foreign-lambda"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="free-ing-vec3-pointers"&gt;Free-ing Vec3 pointers&lt;/h2&gt;
&lt;p&gt;Since &lt;code&gt;Vec3Create&lt;/code&gt; allocates memory for a Vec3 struct using &lt;code&gt;malloc&lt;/code&gt;, it's a good idea to free this when we are done using it. To do this we could bind a function to &lt;code&gt;free&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;free&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;foreign-lambda&lt;/span&gt; &lt;span class="nv"&gt;void&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;free&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;c-pointer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;v&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3_zero&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3_print&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;free&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h2 id="setting-up-getters-and-setters"&gt;Setting up getters and setters&lt;/h2&gt;
&lt;p&gt;If we want to have access to variables of a struct object. We could do something like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;vec3_x&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;foreign-lambda*&lt;/span&gt;
    &lt;span class="nv"&gt;float&lt;/span&gt;
    &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="nf"&gt;c-pointer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Vec3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;C_return(a0-&amp;gt;x);&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;display &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3_x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3_create&lt;/span&gt; &lt;span class="mf"&gt;8.8&lt;/span&gt; &lt;span class="mf"&gt;8.8&lt;/span&gt; &lt;span class="mf"&gt;8.8&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now this is fine but it'll be a pain to specify an accessor for every variable. A better solution is to use the &lt;a href="http://wiki.call-cc.org/eggref/5/foreigners#define-foreign-enum-type"&gt;&lt;code&gt;foreigners&lt;/code&gt;&lt;/a&gt; egg which allows the use of macros that will make our lives easier.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;chicken&lt;/span&gt; &lt;span class="nv"&gt;foreign&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;import&lt;/span&gt; &lt;span class="nv"&gt;foreigners&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Set up the accessors for Vec3 struct&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-foreign-record-type&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3&lt;/span&gt; &lt;span class="nv"&gt;Vec3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;vec3_x&lt;/span&gt; &lt;span class="nv"&gt;vec3_x!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;; vec3_x is a getter, vec3_x! is a setter&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt; &lt;span class="nv"&gt;vec3_y&lt;/span&gt; &lt;span class="nv"&gt;vec3_y!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;z&lt;/span&gt; &lt;span class="nv"&gt;vec3_z&lt;/span&gt; &lt;span class="nv"&gt;vec3_z!&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;v&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3_create&lt;/span&gt; &lt;span class="mf"&gt;4.4&lt;/span&gt; &lt;span class="mf"&gt;5.5&lt;/span&gt; &lt;span class="mf"&gt;6.6&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;display &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3_x&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;; Display value of x&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;newline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3_x!&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="mf"&gt;7.7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;; Set x to 7.7&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;display &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3_x&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;; Display value of x&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;newline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;free&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h2 id="binding-enums"&gt;Binding enums&lt;/h2&gt;
&lt;p&gt;The &lt;a href="http://wiki.call-cc.org/eggref/5/foreigners#define-foreign-enum-type"&gt;&lt;code&gt;foreigners&lt;/code&gt;&lt;/a&gt; egg also allows for the binding of enums using &lt;a href="http://wiki.call-cc.org/eggref/5/foreigners#define-foreign-enum-type"&gt;&lt;code&gt;define-foreign-enum-type&lt;/code&gt;&lt;/a&gt;. Say we have an enum declaration &lt;code&gt;Keys&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;UP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;RIGHT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;DOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;LEFT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;foreign&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;UP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;RIGHT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;DOWN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;LEFT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;These are the basic FFI implementations that I have explored. It should be enough for most uses. The example project with working code can be found &lt;a href="https://github.com/accidentalrebel/chicken-scheme-ffi-example"&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, check out &lt;a href="http://wiki.call-cc.org/eggref/5/bind"&gt;the chicken-bind egg&lt;/a&gt;, it already has all of the code above conveniently in one package. If you don't need full control and just want a simple FFI solution then this is what you need.&lt;/p&gt;</content><category term="dev"></category><category term="programming"></category><category term="dev"></category><category term="research"></category><category term="code"></category></entry><entry><title>#5 - Switching from C/C++ to C</title><link href="http://www.accidentalrebel.com/switching-from-c-c---to-c.html" rel="alternate"></link><published>2020-05-19T17:59:00+08:00</published><updated>2020-05-19T17:59:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2020-05-19:/switching-from-c-c---to-c.html</id><content type="html">&lt;p&gt;After the recent changes to the &lt;a href="http://www.accidentalrebel.com/following-lispy-conventions.html"&gt;lisp side of my engine&lt;/a&gt;, I took some time to review the C/C++ side. You'll notice that I have written C/C++ and that's because my codebase uses both of them. &lt;/p&gt;
&lt;p&gt;When I started my project, I initially intended for it to use just pure C, as this is the one I'm more familiar with. But over time some C++ features crept in. Features like namespacess, bools, and function overloading proved to be useful so I kept using them. Now my code uses C concepts with new nifty C++ features.&lt;/p&gt;
&lt;p&gt;Now, I could have just continued with this approach. It works, after all. But I wondered if I should just stick to C and drop C++ altogether. My thinking is that sticking with just one language would make the code simpler as I only have to use it's subset of features. I know it's not a solid reason but I figured it's better to act now while it is still early.&lt;/p&gt;
&lt;p&gt;&lt;img alt="switching-from-c-c---to-c-01" src="http://www.accidentalrebel.com/images/switching-from-c-c---to-c-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;For the most part, dropping C++ was easy. Most of the difficulty I encountered was making sure the changes worked on all three supported platforms. There was a situation when &lt;a href="https://github.com/accidentalrebel/rebel-game-engine/commits/cglm-switch-fix"&gt;I thought I was done&lt;/a&gt; only to find it doesn't work on Mac and Windows. I had to &lt;a href="https://github.com/accidentalrebel/rebel-game-engine/commits/cglm-switch-fix"&gt;slowly re-apply&lt;/a&gt; the changes just to see where exactly things went wrong.&lt;/p&gt;
&lt;p&gt;What's funny is that I learned that I was using a lot more C++ features than I thought. Namespaces and default arguments are some that really surprised me. I always assumed they were supported on both languages. This just proves to me that I still have a lot to learn with these languages.&lt;/p&gt;
&lt;p&gt;I also took the chance during the transition to switch from &lt;a href="https://glm.g-truc.net/0.9.9/index.html"&gt;GLM&lt;/a&gt;, an OpenGL Mathematics lirary using C++, to &lt;a href="https://github.com/recp/cglm"&gt;CGLM&lt;/a&gt; a similar library that uses C. It is claimed that the latter is more optimized and, with it being in C, is easier to integrate with my codebase.&lt;/p&gt;
&lt;p&gt;While these changes did not do much in terms of progress, I am happy that my codebase now feels tighter and more coherent. I'm hoping to work on something engine-related next.&lt;/p&gt;
&lt;p&gt;If you are interested to check out my still-under-construction game engine, you can do so &lt;a href="https://github.com/accidentalrebel/Rebel-Game-Engine"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="game_engine"></category><category term="dev"></category><category term="game_engine"></category></entry><entry><title>#4 - Following Lispy conventions</title><link href="http://www.accidentalrebel.com/following-lispy-conventions.html" rel="alternate"></link><published>2020-05-15T07:00:00+08:00</published><updated>2020-05-15T07:00:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2020-05-15:/following-lispy-conventions.html</id><content type="html">&lt;p&gt;&lt;img alt="following-lispy-conventions-01" src="http://www.accidentalrebel.com/images/following-lispy-conventions-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;I was adding new Lisp functions to &lt;a href="https://github.com/accidentalrebel/Rebel-Game-Engine"&gt;my game engine&lt;/a&gt; when I noticed that I had functions that had a naming scheme that were inconsistent with others. For example, I had ones that create objects like &lt;em&gt;sprite_create&lt;/em&gt; and &lt;em&gt;shader_create&lt;/em&gt; but this one function I named &lt;em&gt;make_vec3&lt;/em&gt;. I proceeded to rename &lt;em&gt;make_vec3&lt;/em&gt; to &lt;em&gt;vec3_create&lt;/em&gt;. Not only is it consistent with other names but it made me realize that having a pattern of object_verb makes it easy to parse the function and what it does. &lt;/p&gt;
&lt;p&gt;This made me wonder if there are other ways I could improve which led me to this page &lt;a href="http://community.schemewiki.org/?variable-naming-convention"&gt;about variable naming conventions&lt;/a&gt; for Scheme. I learned that the language employs a rather effective yet simple naming convention for functions and variables. I've noticed them before but never really thought about their usefulness. &lt;/p&gt;
&lt;p&gt;For example, adding a &lt;em&gt;?&lt;/em&gt; prefix easily indicates that the function, when called, will always return a boolean value. I looked at my code and I had the function &lt;em&gt;is_key_down&lt;/em&gt;. Changing it to &lt;em&gt;key_down?&lt;/em&gt; looked weird at first but I liked how it made the function name shorter and the &lt;em&gt;?&lt;/em&gt; prefix made it easy to spot and parse.&lt;/p&gt;
&lt;p&gt;Okay, cool! What's next?&lt;/p&gt;
&lt;p&gt;Adding a &lt;em&gt;!&lt;/em&gt; indicates a function that mutates data. Most commonly used for setting a variable. I saw I had variables like &lt;em&gt;set_vec3_x&lt;/em&gt;, to which I changed to &lt;em&gt;vec3_x!&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This went on as I continue to find improvements. Here's a list of all the naming convention changes that I've made:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;&lt;strong&gt;The change&lt;/strong&gt;&lt;/th&gt;
&lt;th align="center"&gt;&lt;strong&gt;From&lt;/strong&gt;&lt;/th&gt;
&lt;th align="center"&gt;&lt;strong&gt;To&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;em&gt;:&lt;/em&gt; infix for namespaces.&lt;/td&gt;
&lt;td align="center"&gt;vec3_create&lt;/td&gt;
&lt;td align="center"&gt;vec3:create&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;em&gt;?&lt;/em&gt; postfix for boolean functions&lt;/td&gt;
&lt;td align="center"&gt;key_down?&lt;/td&gt;
&lt;td align="center"&gt;key:down?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;em&gt;!&lt;/em&gt; postfix for destructive functions&lt;/td&gt;
&lt;td align="center"&gt;set_camera_position&lt;/td&gt;
&lt;td align="center"&gt;camera:position!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;em&gt;%&lt;/em&gt; postfix for low level functions&lt;/td&gt;
&lt;td align="center"&gt;free&lt;/td&gt;
&lt;td align="center"&gt;free%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;em&gt;%&lt;/em&gt; prefix and postfix for low level variables&lt;/td&gt;
&lt;td align="center"&gt;shader-pointer&lt;/td&gt;
&lt;td align="center"&gt;%shader-pointer%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;em&gt;*&lt;/em&gt; prefix and postfix for global variables&lt;/td&gt;
&lt;td align="center"&gt;cube-shader&lt;/td&gt;
&lt;td align="center"&gt;*cube-shader*&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Again, these new changes felt weird at first but I quickly became accustomed the more of these functions I changed. The code became easier to scan as there are now key characters for my eyes to easily latch onto. Something to appreciate especially with multi-level nested expressions.&lt;/p&gt;
&lt;p&gt;Here's how the code now looks like with the new functions:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;MOVEMENT_SPEED&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;*cube*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;*cube-shader*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;*cube-positions*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;set! &lt;/span&gt;&lt;span class="nv"&gt;*cube*&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cube:create&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;assets/textures&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;awesomeface.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;set! &lt;/span&gt;&lt;span class="nv"&gt;*cube-shader*&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;shader:create&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;shaders/simple-3d.vs&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;shaders/simple.fs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;set! &lt;/span&gt;&lt;span class="nv"&gt;*cube-positions*&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3:create&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3:create&lt;/span&gt; &lt;span class="mf"&gt;1.25&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3:create&lt;/span&gt; &lt;span class="mf"&gt;-1.25&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;window:clear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let* &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;main-camera&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;camera:main&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-projection&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;camera:projection&lt;/span&gt; &lt;span class="nv"&gt;main-camera&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;camera-pos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;camera:position&lt;/span&gt; &lt;span class="nv"&gt;main-camera&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;key:up?&lt;/span&gt; &lt;span class="nv"&gt;KEY_C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="nv"&gt;current-projection&lt;/span&gt; &lt;span class="nv"&gt;PERSPECTIVE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;camera:projection!&lt;/span&gt; &lt;span class="nv"&gt;main-camera&lt;/span&gt; &lt;span class="nv"&gt;ORTHOGRAPHIC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;camera:projection!&lt;/span&gt; &lt;span class="nv"&gt;main-camera&lt;/span&gt; &lt;span class="nv"&gt;PERSPECTIVE&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;key:down?&lt;/span&gt; &lt;span class="nv"&gt;KEY_A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3:x!&lt;/span&gt; &lt;span class="nv"&gt;camera-pos&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3:x&lt;/span&gt; &lt;span class="nv"&gt;camera-pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;MOVEMENT_SPEED&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;key:down?&lt;/span&gt; &lt;span class="nv"&gt;KEY_E&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3:x!&lt;/span&gt; &lt;span class="nv"&gt;camera-pos&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3:x&lt;/span&gt; &lt;span class="nv"&gt;camera-pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;MOVEMENT_SPEED&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;key:down?&lt;/span&gt; &lt;span class="nv"&gt;KEY_COMMA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3:z!&lt;/span&gt; &lt;span class="nv"&gt;camera-pos&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3:z&lt;/span&gt; &lt;span class="nv"&gt;camera-pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;MOVEMENT_SPEED&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;key:down?&lt;/span&gt; &lt;span class="nv"&gt;KEY_O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3:z!&lt;/span&gt; &lt;span class="nv"&gt;camera-pos&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3:z&lt;/span&gt; &lt;span class="nv"&gt;camera-pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;MOVEMENT_SPEED&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;for-each&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;%tint%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec3:create%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cube:draw&lt;/span&gt; &lt;span class="nv"&gt;*cube*&lt;/span&gt; &lt;span class="nv"&gt;position&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;%tint%&lt;/span&gt; &lt;span class="nv"&gt;*cube-shader*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;free%&lt;/span&gt; &lt;span class="nv"&gt;%tint%&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
   &lt;span class="nv"&gt;*cube-positions*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;window:swap&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I also changed my C functions to reflect a &lt;em&gt;NamespaceVerb&lt;/em&gt; convention. I could have used &lt;em&gt;namespace::Verb&lt;/em&gt; but the &lt;a href="http://wiki.call-cc.org/eggref/5/bind"&gt;FFI that I use&lt;/a&gt; to communicate with C cannot parse C namespaces. So instead of &lt;em&gt;Shader::Create&lt;/em&gt;, I am left with &lt;em&gt;ShaderCreate&lt;/em&gt;. This is unfortunate, but I'm fine with it since the lisp scripting side of the engine will be the most prominently used (Plus, &lt;a href="https://www.raylib.com/examples.html"&gt;Raylib also uses this convention&lt;/a&gt; for their functions).&lt;/p&gt;
&lt;p&gt;I am happy that I was able to do these changes early. Because of this, readability of my code has increased, something I worried about when I first started implementing scripting.&lt;/p&gt;</content><category term="game_engine"></category><category term="dev"></category><category term="game_engine"></category></entry><entry><title>#3 - Rebel Game Engine now works on different platforms</title><link href="http://www.accidentalrebel.com/rebel-game-engine-now-works-on-different-platforms.html" rel="alternate"></link><published>2020-05-10T07:08:00+08:00</published><updated>2020-05-10T07:08:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2020-05-10:/rebel-game-engine-now-works-on-different-platforms.html</id><content type="html">&lt;p&gt;After &lt;a href="implemented-basic-scheme-scripting-for-rebel-game-engine.md"&gt;finishing the integration&lt;/a&gt; of Chicken-scheme scripting for &lt;a href="https://github.com/accidentalrebel/Rebel-Game-Engine"&gt;my custom game engine&lt;/a&gt; I decided I wanted to tackle another hard problem, and that is making it cross-platform. At the very least, my engine should be able to deploy to Linux, Windows, and MacOSX.&lt;/p&gt;
&lt;p&gt;&lt;img alt="rebel-game-engine-now-works-on-different-platforms-01" src="http://www.accidentalrebel.com/images/rebel-game-engine-now-works-on-different-platforms-01.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;It might seem silly to be working on this while the engine is still in its early stages, but I think it is better to get this out of the way before the codebase becomes huge. With a small codebase I was able to easily identify the causes of the problems as I was porting them.&lt;/p&gt;
&lt;p&gt;It still wasn't a walk in the park, however. Being inexperienced with developing C programs on other platforms (I've only done it mostly in Linux) I had to do research and do a lot of trial and error. I learned so much about cross-compilers, portable makefiles, and the quirks of different package managers.&lt;/p&gt;
&lt;p&gt;After a week of this I was finally able to get the engine working on all three platforms. To make sure others can be able to do the same, I also documented the steps which can now be read on &lt;a href="https://github.com/accidentalrebel/rebel-game-engine/wiki"&gt;the project's wiki&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I was surprised that the hardest one to get working was for Windows. Because I didn't want to create a separate build system that uses Visual Studio solution files, I had to find a simple way to make it work and that involved the use of an excellent building platform for Windows called &lt;a href="https://www.msys2.org/"&gt;Msys2&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I am quite happy that I was able to structure the whole system so that you only need one Makefile for all three platforms. I'm not sure if this wil change in the future, but I'll do my best for it to stay like this as long as it's possible.&lt;/p&gt;
&lt;p&gt;If you are interested to try it out here's the project's &lt;a href="https://github.com/accidentalrebel/rebel-game-engine"&gt;Github page&lt;/a&gt;, depending on your platform here are the instructions on how to build for each one: &lt;a href="https://github.com/accidentalrebel/rebel-game-engine/wiki/Building-and-running-the-engine-for-Arch-Linux"&gt;Linux&lt;/a&gt;, &lt;a href="https://github.com/accidentalrebel/rebel-game-engine/wiki/Building-and-running-the-engine-for-MacOSX"&gt;MacOSX&lt;/a&gt; and &lt;a href="https://github.com/accidentalrebel/rebel-game-engine/wiki/Building-and-running-the-engine-for-Windows-(using-Msys2)"&gt;Windows&lt;/a&gt;.&lt;/p&gt;</content><category term="dev"></category><category term="dev"></category><category term="game_engine"></category></entry><entry><title>#2 - Implemented basic Scheme scripting for Rebel Game Engine</title><link href="http://www.accidentalrebel.com/implemented-basic-scheme-scripting-for-rebel-game-engine.html" rel="alternate"></link><published>2020-05-07T21:35:00+08:00</published><updated>2020-05-07T21:35:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2020-05-07:/implemented-basic-scheme-scripting-for-rebel-game-engine.html</id><content type="html">&lt;p&gt;When I first learned about &lt;a href="http://synthcode.com/wiki/chibi-scheme"&gt;Chibi&lt;/a&gt;, an embeddable scheme that allows scripting on C programs, I immediately tried it out on my game engine. I was able to make it work with my existing APIs but I kept on running against segfaults and memory issues. The community was helpful in answering my questions as I tried to track down the cause of the bug, but I eventually gave up out of frustration.&lt;/p&gt;
&lt;p&gt;I then learned about &lt;a href="http://wiki.call-cc.org/eggref/5/bind"&gt;Chicken Scheme&lt;/a&gt;, a somewhat competitor to Chibi that does the same thing but with a larger community and more documentation. I checked it out and liked it so I went ahead and implemented it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="implemented-basic-scheme-scripting-for-rebel-game-engine-01" src="http://www.accidentalrebel.com/images/implemented-basic-scheme-scripting-for-rebel-game-engine-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;Thankfully I have not experienced any segfaults anymore. It's not because Chicken is better (I don't know well enough of the two to make a good comparison) but because I've come to better understand how to properly structure my code after two implementations.&lt;/p&gt;
&lt;p&gt;And my code did change a lot. The biggest change is switching from an object oriented approach to functional style so that it would suit Lisp scripting. I also paid special attention in making sure that whatever change I made would make sense when the game engine is used without scripting. My guiding principle is that implementing a game on both C and Scheme should be structurally identical, aside from the difference in syntaxes, of course.&lt;/p&gt;
&lt;p&gt;Here's a simple program wher you could move a colored box using the keyboard:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;box-sprite&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;box-pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;set! &lt;/span&gt;&lt;span class="nv"&gt;box-sprite&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sprite_create&lt;/span&gt; &lt;span class="nv"&gt;assets/textures&lt;/span&gt; &lt;span class="nv"&gt;tile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;png&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;set! &lt;/span&gt;&lt;span class="nv"&gt;box-pos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make_vec3&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="no"&gt;#t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;window_clear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;is_key_down&lt;/span&gt; &lt;span class="nv"&gt;KEY_COMMA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set_vec3_y&lt;/span&gt; &lt;span class="nv"&gt;box-pos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get_vec3_y&lt;/span&gt; &lt;span class="nv"&gt;box-pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;is_key_down&lt;/span&gt; &lt;span class="nv"&gt;KEY_O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set_vec3_y&lt;/span&gt; &lt;span class="nv"&gt;box-pos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get_vec3_y&lt;/span&gt; &lt;span class="nv"&gt;box-pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;is_key_down&lt;/span&gt; &lt;span class="nv"&gt;KEY_E&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set_vec3_x&lt;/span&gt; &lt;span class="nv"&gt;box-pos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get_vec3_x&lt;/span&gt; &lt;span class="nv"&gt;box-pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;is_key_down&lt;/span&gt; &lt;span class="nv"&gt;KEY_A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set_vec3_x&lt;/span&gt; &lt;span class="nv"&gt;box-pos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get_vec3_x&lt;/span&gt; &lt;span class="nv"&gt;box-pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;tint&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make_vec3&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sprite_draw&lt;/span&gt; &lt;span class="nv"&gt;box-sprite&lt;/span&gt; &lt;span class="nv"&gt;box-pos&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="nv"&gt;tint&lt;/span&gt; &lt;span class="no"&gt;#f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;window_swap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;#t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Implementing Lisp, and coding with it has been very fun too. I've had the most fun when &lt;a href="http://wiki.call-cc.org/eggref/5/bind"&gt;I implemented the FFI&lt;/a&gt;. Every time I go through the wiki I find a better way of doing things so I'd go and re-implement them again. Each iteration I learn something new and it's such a joy exploring.&lt;/p&gt;
&lt;p&gt;Playing with the garbage collector has also made me think about memory management more. This resulted in having two ways to call certain API functions: one will return a pointer that will automatically get tracked by the GC. The other you'd have to free manually. I figured this is a good approach for situations when having control over memory and references is crucial.&lt;/p&gt;
&lt;p&gt;I've already spent a lot of time on this project and it was mostly spent on the scripting side of the engine. There are still more to do for it to be considered useful but I'm happy I was able to learn a lot.&lt;/p&gt;
&lt;p&gt;If you are curious about the engine you could check it out &lt;a href="https://github.com/accidentalrebel/Rebel-Game-Engine"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="lisp"></category><category term="lisp"></category><category term="game_engine"></category><category term="dev"></category></entry><entry><title>#1 - Thinking of adding Lisp to my custom game engine</title><link href="http://www.accidentalrebel.com/thinking-of-adding-lisp-to-my-custom-game-engine.html" rel="alternate"></link><published>2020-05-03T11:19:00+08:00</published><updated>2020-05-03T11:19:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2020-05-03:/thinking-of-adding-lisp-to-my-custom-game-engine.html</id><content type="html">&lt;p&gt;I've long wondered if I should add a scripting language to &lt;a href="https://github.com/accidentalrebel/Rebel-Game-Engine"&gt;my game engine&lt;/a&gt;. I know that most game engines could do without such a feature but I just recently came across &lt;a href="https://github.com/ashinn/chibi-scheme"&gt;Chibi-Scheme&lt;/a&gt;, a library that allows the use of Scheme lisp scripting for C programs. &lt;/p&gt;
&lt;p&gt;I like Lisp. I use it a lot when customizing my Emacs environment (&lt;a href="https://github.com/accidentalrebel?tab=repositories&amp;amp;q=&amp;amp;type=&amp;amp;language=emacs+lisp"&gt;using ELisp&lt;/a&gt;). There's something about it's syntax and different way to structure programs that appeals to my programmer brain. I've toyed with other Lisp flavors but never had a strong enough reason to continue using them. With Chibi-scheme I may have found that reason.&lt;/p&gt;
&lt;p&gt;&lt;img alt="thinking-of-adding-lisp-to-my-custom-game-engine-01" src="http://www.accidentalrebel.com/images/thinking-of-adding-lisp-to-my-custom-game-engine-01.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I am aware that Lisp is not as widespread as Lua or Javascript. And that choosing it might limit the number of potential people to try out my game engine. But as I've been telling myself over and over, this is a self-learning project. So it's okay if no one would try it out as long as I get to learn from it.&lt;/p&gt;
&lt;p&gt;This morning I started implementing a simple implementation of Chibi. Thankfully, it's easy to setup. However, the more I implement it the more that I realize that I may need to change how my engine is structured to better suit Lisp's functional nature. This means less object oriented design similar to how &lt;a href="https://www.raylib.com/index.html"&gt;Raylib&lt;/a&gt; does things. &lt;/p&gt;
&lt;p&gt;I still need some time to think this through. I am open to do the changes needed if I am to include a scripting language. I just want to make sure if my engine would really need it. We'll see.&lt;/p&gt;</content><category term="engine"></category><category term="dev"></category><category term="lisp"></category><category term="engine"></category></entry><entry><title>Making Unity beep after scripts finish reloading</title><link href="http://www.accidentalrebel.com/making-unity-beep-after-scripts-finish-reloading.html" rel="alternate"></link><published>2020-05-01T17:07:00+08:00</published><updated>2020-05-01T17:07:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2020-05-01:/making-unity-beep-after-scripts-finish-reloading.html</id><content type="html">&lt;p&gt;Our latest game, HistoHunters, has grown into a really big project that compilation now takes a really long time. Longer than no sane programmer wants it to be. It has gotten so bad that changing a single file would take about a minute for recompilation! &lt;/p&gt;
&lt;p&gt;Thankfully, I have managed to shorten this wait time through the use of &lt;a href="https://coffeebraingames.wordpress.com/2018/01/21/reducing-compile-time-in-unity-using-assembly-definition-files/"&gt;assembly definitions&lt;/a&gt;. If you have a big Unity project and compile times are slow, this is the solution to that. Just for kicks I also purchased an SSD and that also helped reduce compile times (Not much as the assembly definitions though).&lt;/p&gt;
&lt;p&gt;However, in spite of these changes compiling still takes a few seconds to reload scripts. This seems to be the lowest it could go. While this is definitely better, I can't help but feel that the seconds spent waiting is wasted.&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-unity-beep-after-scripts-finish-reloading-02" src="http://www.accidentalrebel.com/images/making-unity-beep-after-scripts-finish-reloading-02.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I recently got the idea of having Unity inform me when a script has finished reloading. Instead of informing me visually, I decided that it would also be better for it to play an audible beep sound. With this, I could use the time to close my eyes, relax, or stretch. Once it beeps I'll just open my eyes and I'm back to working again. Once it beeps I'll just open my eyes and I'm back to working again. It's such a simple thing but I feel has a good impact on my health.&lt;/p&gt;
&lt;p&gt;Here's the code that I use if you are interested. Note that this is an editor script so it should be placed inside any "Editor" folder for it to run.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;UnityEditor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Diagnostics&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BuildManager&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MonoBehaviour&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [UnityEditor.Callbacks.DidReloadScripts]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnScriptsReloaded&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;EditorApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Beep&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code above uses Unity's &lt;a href="https://docs.unity3d.com/ScriptReference/EditorApplication.Beep.html"&gt;EditorApplication.Beep()&lt;/a&gt; API so it should work on Windows and Mac. But since I'm using Linux to develop games on it does not seem to work for me. &lt;/p&gt;
&lt;p&gt;Here's a different version that spawns a OS process and runs the &lt;code&gt;play&lt;/code&gt; command to generate a short sine wave beep. Be sure to have &lt;a href="http://sox.sourceforge.net/"&gt;sox&lt;/a&gt; installed on your Linux machine for this to work.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ProcessStartInfo&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ProcessStartInfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;play&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Arguments&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-q -n synth 0.1 sin 880 vol 0.2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WindowStyle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProcessWindowStyle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Minimized&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateNoWindow&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, this is not a solution to the compile time problem. I'd still have to wait for it to finish. But what I like about this is that it has turned a negative into a positive. And that is always great.&lt;/p&gt;</content><category term="dev"></category><category term="dev"></category><category term="unity"></category></entry><entry><title>Opening Unity Script Files in Emacs</title><link href="http://www.accidentalrebel.com/opening-unity-script-files-in-emacs.html" rel="alternate"></link><published>2018-01-24T14:32:00+08:00</published><updated>2018-01-24T14:32:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2018-01-24:/opening-unity-script-files-in-emacs.html</id><content type="html">&lt;p&gt;&lt;img alt="01" src="https://i.imgur.com/9XWvvi0.png" /&gt;&lt;/p&gt;
&lt;p&gt;I've recently embarked on a mission to fully integrate &lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; with my Unity game development environment. One feature that I wanted to have is the ability to open Unity scripts and text-based files in Emacs instead of MonoDevelop. This is an easy task for supported external editors but for those who aren't (Like Emacs), doing something like this is a bit tricky.&lt;/p&gt;
&lt;p&gt;Setting &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Invoking-emacsclient.html"&gt;emacsclient&lt;/a&gt; as the external editor works in opening the files but the line number is not passed at all (Or is not received by emacs. &lt;a href="https://forum.unity.com/threads/external-editor-arguments-issue.350473/"&gt;Seems to be a bug&lt;/a&gt;). This means that opening files in the Project Window works but you would not be able to to jump to lines that have errors from the Console. This, of course, is unacceptable.&lt;/p&gt;
&lt;p&gt;&lt;img alt="02" src="https://i.imgur.com/8gcVuom.png" /&gt;&lt;/p&gt;
&lt;p&gt;I've tried a number of different solutions. A lot of them are hacky but clever. There was this one option of setting a &lt;a href="https://github.com/bbbscarter/EmacsProxy"&gt;Sublime Text proxy&lt;/a&gt; as a external editor and then having that application call Emacs with the correct line number. I was not able to make it work but the idea fascinated me. There was also one that involved using Mac OS X's Automator where you &lt;a href="https://stackoverflow.com/a/1857220"&gt;wrap a shell script as an automator app&lt;/a&gt; and you set that as the external editor. Didn't work either but it did teach me about Automator and it's future possible uses for my environment.&lt;/p&gt;
&lt;p&gt;Thankfully, there was one solution that worked and it involved creating a .cs file and setting up a function with OnOpenAssetAttribute callback attribute. This function is called when Unity receives a command to open an asset. From here we start a process that invokes emacsclient with the correct file and line numbers. &lt;/p&gt;
&lt;p&gt;Here is a short example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;[OnOpenAssetAttribute()]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;OnOpenedAsset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;instanceID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EditorUtility&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InstanceIDToObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instanceID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;ProjectPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetDirectoryName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataPath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;completeFilepath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProjectPath&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DirectorySeparatorChar&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;AssetDatabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAssetPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// We check if this is the type of file we can open&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UnityEditor.MonoScript&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt;
        &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UnityEngine.Shader&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-n +&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;completeFilepath&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// We start a process by passing the command &amp;quot;emacsclient -n +linenumber filePath&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Diagnostics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Diagnostics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/Applications/Emacs.app/Contents/MacOS/bin/emacsclient&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Arguments&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UseShellExecute&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WindowStyle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Diagnostics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProcessWindowStyle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateNoWindow&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RedirectStandardOutput&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;bo          // Tell unity we have handled the opening of the file.
            return true;
        }&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;We&lt;/span&gt; &lt;span class="nv"&gt;were&lt;/span&gt; &lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;able&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;open&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt;. &lt;span class="nv"&gt;Let&lt;/span&gt; &lt;span class="nv"&gt;unity&lt;/span&gt; &lt;span class="nv"&gt;handle&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;opening&lt;/span&gt;.
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This file needs to be placed inside an "Editor" folder within Unity in order for it to work.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/accidentalrebel/69ac38f729e72c170a8d091b4daaec52"&gt;Go here&lt;/a&gt; if you want to see a more complete and fully featured implementaition of the code above. Also, a hat tip to &lt;a href="https://github.com/tbriley/Atom"&gt;this repository&lt;/a&gt; for the solution which was largely inspired by the &lt;a href="https://github.com/dotBunny/VSCode"&gt;VSCode project&lt;/a&gt;.&lt;/p&gt;</content><category term="emacs"></category><category term="emacs unity"></category></entry><entry><title>Chef Wars Postmortem -- What Went Right: Risk Adjusted Technical Estimates</title><link href="http://www.accidentalrebel.com/chef-wars-postmortem--what-went-right-risk-adjusted-estimates.html" rel="alternate"></link><published>2017-12-10T23:33:00+08:00</published><updated>2017-12-10T23:33:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2017-12-10:/chef-wars-postmortem--what-went-right-risk-adjusted-estimates.html</id><content type="html">&lt;p&gt;&lt;strong&gt;Note: This is from a &lt;a href="http://www.accidentalrebel.com/tags/chefwars_postmortem/"&gt;series of articles&lt;/a&gt; that outlines the things I've learned while making &lt;a href="http://mindcakegames.com/"&gt;Chef Wars&lt;/a&gt; for 2+ years.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We used a risk adjusted estimation system that produces near accurate estimates we can confidently rely on.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;I usually dreaded being asked how long a programming task will take. I always seem to have the knack to overshoot no matter how hard I try. This is an all too common scenario that programmers face and is something that is considered to be a difficult, if not impossible, problem to solve.&lt;/p&gt;
&lt;p&gt;&lt;img alt="01" src="https://i.imgur.com/KqCZUHl.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;This all changed when I was introduced to a helpful system that helps in producing estimates that are "accurate enough". I don't think it has a name yet but my colleagues who introduced me to it says that they got it from a &lt;a href="https://www.gamasutra.com/view/feature/181992/waterfall_game_development_done_.php"&gt;Gamasutra article&lt;/a&gt; by Eric Preisz of Garage Games. Since then I've used this system in all my game development related projects and has helped us immensely in the development of our recent game, &lt;a href="http://mindcakegames.com/"&gt;Chef Wars&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm sharing this in the hopes that it would help others too.&lt;/p&gt;
&lt;h2 id="risk-adjusted-estimates"&gt;Risk Adjusted Estimates&lt;/h2&gt;
&lt;p&gt;The basic idea of this system is that for each task, an estimated time would be given along with a "confidence level". The lower the confidence the more padding is added automatically to the estimate for that task.&lt;/p&gt;
&lt;p&gt;It's a very simple system and is illustrated clearly in the image below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th align="center"&gt;Estimate&lt;/th&gt;
&lt;th align="center"&gt;Confidence&lt;/th&gt;
&lt;th align="right"&gt;Risk-Adjusted&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Task A&lt;/td&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;9.44&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Task B&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;td align="right"&gt;11.56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Task C&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="right"&gt;12.22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Task D&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="right"&gt;10.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A legend (shown below) is used to help programmers determine what confidence level to specify based on their current situation.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th align="right"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align="right"&gt;No clue -- don't make decisions on this. We need to talk more.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td align="right"&gt;Hardly a clue -- don't make decisions on this. We need to talk more.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td align="right"&gt;Someone else has done this and I read about it; job not well defined -- don't make decisions on this. We need to talk more.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td align="right"&gt;Someone else has done this and I think I understand this; job might not be well-defined -- don't make decisions on this. We need to talk more.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td align="right"&gt;Done something similar to this before and this relates to that work -- this estimate has a variance of +/- 50 percent of estimate.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td align="right"&gt;I think I understand this fairly well and I understand the goal.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td align="right"&gt;The average case for programming when the requirements are understood.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td align="right"&gt;A confident case for programming. It's rare that something unexpected would happen.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td align="right"&gt;I've done this before and it's very similar. If something unexpected comes up, I know how to tackle it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td align="right"&gt;No matter what, I'm only going to work on this for the specified period of time&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The formula for calculating the risk-adjusted time is also very straightforward:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(estimated time * (10 - confidence level) / 9) + estimated time&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From hereon you can easily compute for the total time and make a comparison between the estimated time and the risk adjusted time.&lt;/p&gt;
&lt;p&gt;To see how all of this works you can check out our &lt;a href="https://docs.google.com/spreadsheets/d/1KNTq88bw5qO6Ejbm71z31X-jraJDjB-9WET-2BZR2-s/edit?usp=sharing"&gt;Technical Estimate Template Sheet&lt;/a&gt; at our Google Drive. Or if you are into Emacs, I also have a &lt;a href="https://gist.github.com/accidentalrebel/0df9f9e024c7e3d433ef8a4f9fada2a9"&gt;template for that as well&lt;/a&gt; using OrgMode.&lt;/p&gt;
&lt;h2 id="how-effective-is-it"&gt;How effective is it?&lt;/h2&gt;
&lt;p&gt;The following is taken from the technical estimate I made for a recent module in Chef Wars. I've logged the actual time it took me to finish the task so the results can be compared.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;Each estimate is in hours.&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Task&lt;/th&gt;
&lt;th align="center"&gt;Estimate&lt;/th&gt;
&lt;th align="center"&gt;Confidence&lt;/th&gt;
&lt;th align="center"&gt;Risk Adjusted&lt;/th&gt;
&lt;th align="center"&gt;Actual time&lt;/th&gt;
&lt;th align="center"&gt;Difference&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;[Backend] Create PVP Player Collections&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;2.4444444&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1.44&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;[Backend] Set Player PVP Collections&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;9.7777778&lt;/td&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="center"&gt;2.78&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;[Leaderboard] Fetch City Leaderboards&lt;/td&gt;
&lt;td align="center"&gt;16&lt;/td&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="center"&gt;21.333333&lt;/td&gt;
&lt;td align="center"&gt;18&lt;/td&gt;
&lt;td align="center"&gt;3.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;[Leaderboard] Monthly Leaderboard Resetting&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="center"&gt;2.6666667&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;-1.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;[Logic] PVP Competition Setup&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="center"&gt;10.666667&lt;/td&gt;
&lt;td align="center"&gt;9&lt;/td&gt;
&lt;td align="center"&gt;1.67&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;[UI] Add the City Ranking button in Global/Friend Rankings&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;[UI] City Master Chefs UI&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;2.4444444&lt;/td&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;td align="center"&gt;-3.56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;[UI] City Arena UI&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;2.4444444&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;-1.56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;[UI] Top Chef Awarding Pop Up&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;1.2222222&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;-0.78&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Totals&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;53.99&lt;/td&gt;
&lt;td align="center"&gt;51&lt;/td&gt;
&lt;td align="center"&gt;2.99&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As you can see that the actual times are very close to the risk adjusted times. I overshot quite a bit during the UI related tasks but the time lost was offseted by the other tasks as seen in the totals. &lt;/p&gt;
&lt;p&gt;Take note that this is just a small sample and results will vary. There are times where totals still overshoot but mostly it is just in terms of a few hours, or at worst a full day. Regardless, our overall experience has been great as it has proven to be accurate enough that we could confidently commit to certain dates and schedules.&lt;/p&gt;
&lt;h2 id="tips-on-using-this-system"&gt;Tips on using this system&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This system works great if you know the tasks beforehand. You really need to sit down and think what the steps are and try not to miss anything and to avoid adjustments.&lt;/li&gt;
&lt;li&gt;The more granular the tasks, the easier it is to assign a time and confidence level to them.&lt;/li&gt;
&lt;li&gt;Being honest with the confidence levels helps produce more accurate estimates. It also brings to light any low-confidence tasks that are in need of reconsideration.&lt;/li&gt;
&lt;li&gt;Make the scope smaller and easier to digest by dividing your project into smaller parts (It can be by milestone or by module) and then make an estimate for each.&lt;/li&gt;
&lt;li&gt;Do this long enough and you'll get better with judging estimates and confidence levels.&lt;/li&gt;
&lt;li&gt;It helps to review and compare how long a task took against your estimates. It will give you insight why you overshot (In the example above, I learned that I am still bad at properly estimating UI related tasks. I should adjust my confidence levels for next time).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This simple system has helped us a lot and we plan to use it on all our future projects. It's not 100% accurate but it is accurate enough that we can schedule confidently with it. I would be the first to admit that it may not work for everyone but if you are always overshooting your estimates then this system might be worth a try.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Check out our game which was released relatively on time over at &lt;a href="https://play.google.com/store/apps/details?id=air.com.mindcakegames.chefwars&amp;amp;hl=en"&gt;Android&lt;/a&gt; and &lt;a href="https://itunes.apple.com/us/app/chef-wars/id1254831133?mt=8"&gt;iOS&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;</content><category term="postmortem"></category><category term="chefwars"></category><category term="gamedev"></category><category term="mindcake"></category><category term="postmortem"></category></entry><entry><title>Chef Wars Postmortem -- What went wrong: Optimizing too early and too late</title><link href="http://www.accidentalrebel.com/chef-awrs-postmortem--what-went-wrong-optimizing-too-early-and-too-late.html" rel="alternate"></link><published>2017-12-06T00:02:00+08:00</published><updated>2017-12-06T00:02:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2017-12-06:/chef-awrs-postmortem--what-went-wrong-optimizing-too-early-and-too-late.html</id><content type="html">&lt;p&gt;&lt;strong&gt;Note: This is from a &lt;a href="http://www.accidentalrebel.com/tags/chefwars_postmortem/"&gt;series of articles&lt;/a&gt; that outlines the things I've learned while making &lt;a href="http://mindcakegames.com/"&gt;Chef Wars&lt;/a&gt; for 2+ years.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is more to the saying that "premature optimization is the root of all evil".&lt;/li&gt;
&lt;li&gt;Instead of asking WHEN to optimize, it is more important to ask WHAT and HOW to optimize.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;It is a well known adage among programmers that premature optimization is the root of all evil. If this is true then I must have been very close to the devil himself.&lt;/p&gt;
&lt;p&gt;During the early months of development on Chef Wars I did my best to optimize my code as much as possible. We were making a big game and I wanted to have a stable foundation to build our game on. I obsessed over lots of things from the interconnection of the various systems to folder structures. I was happy with all that I've built, but sadly progress was slow.&lt;/p&gt;
&lt;p&gt;I realized at this point that I was optimizing too prematurely. If I wanted to reach my milestones on time then I needed to change my approach. This means leaving the optimizations for later. When is later though? I figured that it makes sense to do it at the end when all the systems are in place.&lt;/p&gt;
&lt;p&gt;All went smoothly until we reached Open Beta. The game was reported to be sluggish and almost unplayable which signaled the need to start optimizing. While I was able to optimize some parts, there were some that I could not optimize properly without undergoing a major change to the code. Sadly, rewrites were not an option as we were running out of time.&lt;/p&gt;
&lt;p&gt;&lt;img alt="01" src="https://media.giphy.com/media/26n6T9MrKZ2Qo16Vy/giphy.gif" /&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;The profiler has been really helpful in catching performance problems.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looking back it is easy to pinpoint what went wrong. I was optimizing too early, later changed my approach only to find out that I was already too late to optimize certain critical parts. I, of course, want to prevent this from happening again. So the million dollar question is: How does one determine when to optimize? How does one know when is too early and too late?&lt;/p&gt;
&lt;h2 id="the-complete-version"&gt;The complete version&lt;/h2&gt;
&lt;p&gt;I later learned that the famous adage actually has a longer version:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="02" src="https://i.imgur.com/dqPF0cK.jpg" /&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;From Donald Knuth&amp;#39;s The Art of Computer Programming
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Turns out there was more to the saying that completely changes the lesson to be learned. Breaking it down we can infer that the author is telling us that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Too much obsession over non-critical parts wastes time.&lt;/li&gt;
&lt;li&gt;Only focus on efficiencies that matter.&lt;/li&gt;
&lt;li&gt;Optimize whenever possible, but not at the expense of the previously mentioned points.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So instead of asking WHEN to optimize, it is more important to ask WHAT and HOW to optimize. In other words, anytime there is a chance to evaluate if an optimization is needed, one needs to consider whether there really is something worthwhile to optimise, and if so, how to proceed in optimizing.&lt;/p&gt;
&lt;h2 id="answering-the-what-and-how"&gt;Answering the WHAT and HOW&lt;/h2&gt;
&lt;p&gt;Knowing how to answer the WHAT and HOW is not easy and requires both experience and careful planning to get right. The internet is a bit divided about this as nobody really knows the best answer. In spite of this, I was able to gather some helpful nuggets of wisdom during my research that are worth considering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be critical of what optimizations to use at each stage of the project. Determine how critical it is and if it can be done later.&lt;/li&gt;
&lt;li&gt;If setting aside optimizations for later, make sure to prepare the code so that it would be easy to do so when the time comes.&lt;/li&gt;
&lt;li&gt;Proper planning during the design stage can determine what to build and how to optimize in advance.&lt;/li&gt;
&lt;li&gt;Measuring/profiling optimizations would reveal which are the most effective to use in the future.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There is a certain sense of pride in producing optimized and stable code. Sadly, this kind of perfection comes at a cost of time. The solution is to always consider at all times when, what, and how to optimize.&lt;/p&gt;
&lt;p&gt;This may all seem overkill to worry about but after going through 2 years worth of development on Chef Wars, I know all of this is worth taking the extra effort to do right. I hope that what I've learned may also be of use to you.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[Our game is running better now and you could play it by downloading it on on &lt;a href="https://play.google.com/store/apps/details?id=air.com.mindcakegames.chefwars&amp;amp;hl=en"&gt;Android&lt;/a&gt; and &lt;a href="https://play.google.com/store/apps/details?id=air.com.mindcakegames.chefwars&amp;amp;hl=en"&gt;iOS&lt;/a&gt;. Also check out my &lt;a href="http://www.accidentalrebel.com/blog/2017/12/05/chef-wars-postmortem--what-went-right-having-a-universe-file/"&gt;previous postmortem&lt;/a&gt; where I talk about something that went right.]&lt;/em&gt;&lt;/p&gt;</content><category term="postmortem"></category><category term="chefwars"></category><category term="gamedev"></category><category term="mindcake"></category><category term="postmortem"></category></entry><entry><title>Chef Wars Postmortem -- What went right: Having a Universe File</title><link href="http://www.accidentalrebel.com/chef-wars-postmortem--what-went-right-having-a-universe-file.html" rel="alternate"></link><published>2017-12-05T12:56:00+08:00</published><updated>2017-12-05T12:56:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2017-12-05:/chef-wars-postmortem--what-went-right-having-a-universe-file.html</id><content type="html">&lt;p&gt;&lt;strong&gt;Note: This is from a &lt;a href="http://www.accidentalrebel.com/tags/chefwars_postmortem/"&gt;series of articles&lt;/a&gt; that outlines the things I've learned while making &lt;a href="http://mindcakegames.com/"&gt;Chef Wars&lt;/a&gt; for 2+ years.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All data in our game is contained in one excel file we call the "Universe".&lt;/li&gt;
&lt;li&gt;Prototypes can be done on the Universe excel file itself&lt;/li&gt;
&lt;li&gt;Iteration is easier as we only need to change one file.&lt;/li&gt;
&lt;li&gt;We made a system that downloads changes from our server so players don't need to update their builds.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Before we started development on Chef Wars, Cliff, my co-founder and game designer for the team, already had pages of spreadsheets containing important values in the game. It's kinda like a game design document but in the form of tables, columns, and rows. This "Universe" file contained everything from stats, dialogue, competitions, locations, chefs, and enemies just to name a few. &lt;/p&gt;
&lt;p&gt;&lt;img alt="01" src="https://i.imgur.com/rVZqbaH.png" /&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;*This file definitely gives a hint on what type of guy Cliff is.*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Having a list of all the data that will be used in the game has helped us visualize the scope and the systems to be built, especially in making prototypes. One time Cliff made a simulation of the battle system using his Excel mastery. The universe data is fed into this simulation (i.e. competition level, recipe power) and the expected values are displayed (i.e. judging result, rewards amount). This mockup allowed us to see how the battles play out and made the whole thing easier for me to understand and implement in the engine.&lt;/p&gt;
&lt;p&gt;All the content of the universe file is then converted to the JSON format which is used directly by the game. Iterating on the game is easy because the file would just need to be converted again for the new changes to show up. The conversion process is done manually though using a CSV to JSON tool. I would have automated the process but didn't have the time to work on it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="02" src="https://i.imgur.com/lE5zqDu.png" /&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;*It&amp;#39;s like the Matrix*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Initially, when we wanted to update some values, we would need to push a new build version that players need to download. We figured that this is too cumbersome especially if we really have some critical changes we want to get out as soon as possible. As a solution to this, we made a system where a master copy of the JSONs are saved on our servers. We can change the data from here and the game would automatically download the necessary files that we changed. This is a really great feature that has helped us push important changes without having the need for a new build. But it does require a lot of bandwidth especially if a lot of players request for the new data so we do it only when needed like on crash producing bugs.&lt;/p&gt;
&lt;p&gt;As you can see, we've spent a lot of time making sure that our game is data-centric as possible and it benefitted us immensely. This approach has been so useful that we plan to use it on our future projects. And hopefully, after reading this, we've convinced you to try it out too.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[Check out how the universe has been transformed into a game by playing Chef Wars on &lt;a href="https://play.google.com/store/apps/details?id=air.com.mindcakegames.chefwars&amp;amp;hl=en"&gt;Android&lt;/a&gt; and &lt;a href="https://play.google.com/store/apps/details?id=air.com.mindcakegames.chefwars&amp;amp;hl=en"&gt;iOS&lt;/a&gt;. Also, be sure to check out Cliff's postmortem where he talks about the &lt;a href="http://mindcakegames.com/chef-wars-launch-post-mortem/"&gt;things we learned during our global launch&lt;/a&gt;!]&lt;/em&gt;&lt;/p&gt;</content><category term="postmortem"></category><category term="chefwars"></category><category term="gamedev"></category><category term="mindcake"></category><category term="postmortem"></category></entry><entry><title>Temp Solution For When Text Copying Does Not Work in Emacs Under Windows Subsytem for Linux</title><link href="http://www.accidentalrebel.com/temp-solution-for-when-copying-does-not-work-in-emacs-under-windows-subsystem-for-linux.html" rel="alternate"></link><published>2017-09-23T13:08:00+08:00</published><updated>2017-09-23T13:08:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2017-09-23:/temp-solution-for-when-copying-does-not-work-in-emacs-under-windows-subsystem-for-linux.html</id><content type="html">&lt;p&gt;One of the problems I was having with my Emacs environment under WSL &lt;em&gt;(Windows Subsystem for Linux, aka. Bash On Windows)&lt;/em&gt; is that I could not copy text from WSL Emacs to other Windows applications. Copy and pasting from Windows to Emacs works without any problems so it's weird it does not work the other way around.&lt;/p&gt;
&lt;p&gt;I tried a lot of solutions from Google but none of them seem to work. There was an emacs package called &lt;a href="https://github.com/rolandwalker/simpleclip"&gt;simpleclip&lt;/a&gt; that worked but the results were not consistent.&lt;/p&gt;
&lt;p&gt;I then realized that a temporary solution would be to make use of Windows' clip.exe command line utility which can bme seen below.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;arebel-set-clipboard-data&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;str-val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Puts text in Windows clipboard. Copying to Windows from WSL does &lt;/span&gt;
&lt;span class="s"&gt;not work on my end so this one is a temporary solution.&lt;/span&gt;

&lt;span class="s"&gt;This function is called from within the simpleclip package when copy &lt;/span&gt;
&lt;span class="s"&gt;or bgcopy command is issued.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;start-process&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cmd.exe&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/C&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;echo &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\r&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;str-val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; | clip.exe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works quite nicely especially after integrating it with simpleclip. This would do for now until I find a better solution.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;EDIT (2017-10-01):&lt;/strong&gt; Turns out the original code could not copy a region with multiple lines due to the difference in carriage return characters. This is now fixed with &lt;code&gt;(replace-regexp-in-string "\n" "\r" str-val)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="emacs"></category><category term="emacs windows linux"></category></entry><entry><title>Converting org-journal entry to org-page post</title><link href="http://www.accidentalrebel.com/converting-org-journal-entry-to-org-page-post.html" rel="alternate"></link><published>2017-04-19T13:17:00+08:00</published><updated>2017-04-19T13:17:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2017-04-19:/converting-org-journal-entry-to-org-page-post.html</id><content type="html">&lt;p&gt;Since my recent switch from Wordpress to &lt;a href="https://github.com/kelvinh/org-page"&gt;org-page&lt;/a&gt; I wanted a way to convert my org-journal entries to org-page posts. Instead of copying each entry by hand and pasting to an org-page new page buffer I decided to make an elisp code that would do it automatically which can be seen below:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;arebel-org-journal-entry-to-org-page-post&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Copy the org-journal entry at point and then convert it to a org-page new post buffer.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;org-journal-mode&lt;/span&gt; &lt;span class="nv"&gt;major-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;headline-text&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;nth&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-heading-components&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;entry-text&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-get-entry&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;funcall-interactively&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;op/new-post&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;blog&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buffer-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;headline-text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="nv"&gt;entry-text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;This function can only be called inside org-journal-mode.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The function is simple and uses functions from org-mode and org-page.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, it checks if the current buffer is in org-journal-mode&lt;/li&gt;
&lt;li&gt;Then it gets the headline text and entry texts&lt;/li&gt;
&lt;li&gt;It then calls op/new-post. It does it interactively so that it will trigger the prompts needed to populate the template. (Also notice that it takes the org-journal buffer name plus time as the blog post's org file name. This way I don't have to specify it.)&lt;/li&gt;
&lt;li&gt;It then inserts the entry-text at the end of the buffer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From here I am free to edit, commit, then publish.&lt;/p&gt;
&lt;p&gt;It's working great. As proof this post you are reading right now has been made with the code above.&lt;/p&gt;</content><category term="org-mode"></category><category term="emacs org-mode"></category></entry><entry><title>Converting org-journal entry to org-page post</title><link href="http://www.accidentalrebel.com/minifying-buffer-contents-in-emacs.html" rel="alternate"></link><published>2017-04-19T13:17:00+08:00</published><updated>2017-04-19T13:17:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2017-04-19:/minifying-buffer-contents-in-emacs.html</id><content type="html">&lt;p&gt;I needed a way to minify JSON files from Emacs so I made the short function below.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;arebel-minify-buffer-contents&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;Minifies the buffer contents by removing whitespaces.&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;delete-whitespace-rectangle&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mark-whole-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-min&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;search-forward&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;replace-match&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The function is very simple. First it deletes the whitespaces for the whole current buffer then removes every newline.&lt;/p&gt;
&lt;p&gt;This effectively turns this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;glossary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;example glossary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;GlossDiv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;GlossList&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;GlossEntry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;ID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SGML&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;SortAs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SGML&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;GlossTerm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Standard Generalized Markup Language&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;Acronym&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SGML&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;Abbrev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ISO 8879:1986&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;GlossDef&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;


                          &lt;span class="nt"&gt;&amp;quot;para&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A meta-markup language, used to create markup languages such as DocBook.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;GlossSeeAlso&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GML&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;XML&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;GlossSee&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;markup&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;glossary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;example glossary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;GlossDiv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;GlossList&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;GlossEntry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;ID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SGML&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;SortAs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SGML&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;GlossTerm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Standard Generalized Markup Language&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Acronym&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SGML&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Abbrev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ISO 8879:1986&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;GlossDef&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;para&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A meta-markup language, used to create markup languages such as DocBook.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;GlossSeeAlso&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GML&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;XML&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;GlossSee&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;markup&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}}}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works for my current needs but have not fully tested it yet. It works for emacs lisp buffers too.&lt;/p&gt;</content><category term="emacs"></category><category term="emacs"></category></entry></feed>