<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>AccidentalRebel.com - tools</title><link href="https://www.accidentalrebel.com/" rel="alternate"></link><link href="https://www.accidentalrebel.com/feeds/tools.atom.xml" rel="self"></link><id>https://www.accidentalrebel.com/</id><updated>2021-10-18T20:33:00+08:00</updated><entry><title>New Tool Preview: vATT&amp;CK</title><link href="https://www.accidentalrebel.com/new-tool-preview-vattack.html" rel="alternate"></link><published>2021-10-18T20:33:00+08:00</published><updated>2021-10-18T20:33:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-10-18:/new-tool-preview-vattack.html</id><summary type="html">&lt;p&gt;I have released a new cybersecurity-related tool called &lt;a href="https://github.com/accidentalrebel/vATTACK"&gt;vATT&amp;amp;CK (Visual ATT&amp;amp;CK)&lt;/a&gt;. It is a relationship visualizer for the Mitre ATT&amp;amp;CK framework.&lt;/p&gt;
&lt;p&gt;&lt;img alt="new-tool-preview-vattack-01" src="https://www.accidentalrebel.com/images/new-tool-preview-vattack-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;What the tool does is that it makes a visual map of the searched technique and all the related information. You can watch a video of the tool in action &lt;a href="https://www.youtube.com/watch?v=xCc7aAqbSNI"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Each node will be colored depending on it's category. The color legends is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pink - Related subtechniques&lt;/li&gt;
&lt;li&gt;Orange - Malware that uses the searched technique&lt;/li&gt;
&lt;li&gt;Red - Groups that uses the searched technique&lt;/li&gt;
&lt;li&gt;Blue - Tools that use the searched technique&lt;/li&gt;
&lt;li&gt;Yellow - Mitigations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tool is still in development. I plan to add a number of improvements such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ability to click on nodes and then update the visual map&lt;/li&gt;
&lt;li&gt;Ability to search not just by technique, but also by other categories&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also plan on releasing a live demo of the tool very soon in the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have released a new cybersecurity-related tool called &lt;a href="https://github.com/accidentalrebel/vATTACK"&gt;vATT&amp;amp;CK (Visual ATT&amp;amp;CK)&lt;/a&gt;. It is a relationship visualizer for the Mitre ATT&amp;amp;CK framework.&lt;/p&gt;
&lt;p&gt;&lt;img alt="new-tool-preview-vattack-01" src="https://www.accidentalrebel.com/images/new-tool-preview-vattack-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;What the tool does is that it makes a visual map of the searched technique and all the related information. You can watch a video of the tool in action &lt;a href="https://www.youtube.com/watch?v=xCc7aAqbSNI"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Each node will be colored depending on it's category. The color legends is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pink - Related subtechniques&lt;/li&gt;
&lt;li&gt;Orange - Malware that uses the searched technique&lt;/li&gt;
&lt;li&gt;Red - Groups that uses the searched technique&lt;/li&gt;
&lt;li&gt;Blue - Tools that use the searched technique&lt;/li&gt;
&lt;li&gt;Yellow - Mitigations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tool is still in development. I plan to add a number of improvements such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ability to click on nodes and then update the visual map&lt;/li&gt;
&lt;li&gt;Ability to search not just by technique, but also by other categories&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also plan on releasing a live demo of the tool very soon in the hopes of getting feedback from the community. &lt;/p&gt;
&lt;p&gt;For now, if you are interested in the project, you could visit the &lt;a href="https://github.com/accidentalrebel/vATTACK"&gt;tool's Github project page&lt;/a&gt; or contact me for any comments or suggestions.&lt;/p&gt;</content><category term="tools"></category><category term="tools"></category><category term="cybersecurity"></category></entry><entry><title>Introducing shcode2exe</title><link href="https://www.accidentalrebel.com/introducing-shcode2exe.html" rel="alternate"></link><published>2021-02-26T07:34:00+08:00</published><updated>2021-02-26T07:34:00+08:00</updated><author><name>AccidentalRebel</name></author><id>tag:www.accidentalrebel.com,2021-02-26:/introducing-shcode2exe.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;[Edit: shcode2exe is &lt;a href="https://docs.remnux.org/discover-the-tools/dynamically+reverse-engineer+code/shellcode#shcode-2-exe"&gt;now part of Remnux&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I've been playing around with &lt;a href="https://remnux.org/"&gt;Remnux&lt;/a&gt; and encountered a problem trying to get one of the tools to run properly. The tool is &lt;a href="https://github.com/repnz/shellcode2exe"&gt;shellcode2exe&lt;/a&gt;, it is used to compile binary shellcode to a file so it can easily be debugged by a debugger.&lt;/p&gt;
&lt;p&gt;When I checked out the code, I was surprised to find out how simple it is. Basically, what happens is that the inputted shellcode is added to a barebones assembly file using the &lt;code&gt;incbin&lt;/code&gt; assembly instruction. From there, the file is then automatically compiled and linked.&lt;/p&gt;
&lt;p&gt;One big problem with the tool is that it needs to use &lt;a href="https://www.winehq.org/"&gt;Wine&lt;/a&gt; if it needs to run on Linux. I don't want such a huge dependency especially for my own malware analysis lab so I decided to write my own version which have led to the creation of &lt;code&gt;shcode2exe&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="shcode2exe"&gt;shcode2exe&lt;/h2&gt;
&lt;p&gt;While similar in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;[Edit: shcode2exe is &lt;a href="https://docs.remnux.org/discover-the-tools/dynamically+reverse-engineer+code/shellcode#shcode-2-exe"&gt;now part of Remnux&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I've been playing around with &lt;a href="https://remnux.org/"&gt;Remnux&lt;/a&gt; and encountered a problem trying to get one of the tools to run properly. The tool is &lt;a href="https://github.com/repnz/shellcode2exe"&gt;shellcode2exe&lt;/a&gt;, it is used to compile binary shellcode to a file so it can easily be debugged by a debugger.&lt;/p&gt;
&lt;p&gt;When I checked out the code, I was surprised to find out how simple it is. Basically, what happens is that the inputted shellcode is added to a barebones assembly file using the &lt;code&gt;incbin&lt;/code&gt; assembly instruction. From there, the file is then automatically compiled and linked.&lt;/p&gt;
&lt;p&gt;One big problem with the tool is that it needs to use &lt;a href="https://www.winehq.org/"&gt;Wine&lt;/a&gt; if it needs to run on Linux. I don't want such a huge dependency especially for my own malware analysis lab so I decided to write my own version which have led to the creation of &lt;code&gt;shcode2exe&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="shcode2exe"&gt;shcode2exe&lt;/h2&gt;
&lt;p&gt;While similar in functionality with the original tool, the biggest improvement I made is that it it does not depend on Wine along with other features as listed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can accept a shellcode blob or string (String format &lt;code&gt;\x5e\x31&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Can target both 32bit or 64bit Windows architecture. &lt;/li&gt;
&lt;li&gt;Cross platform. Works on Linux or Windows.&lt;/li&gt;
&lt;li&gt;No dependency on Wine when running on Linux&lt;/li&gt;
&lt;li&gt;Tested working with Python v3.3 and above&lt;/li&gt;
&lt;li&gt;Tested working on Windows 7 (Non SP1) and above&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;p&gt;Here's the help message for the tool:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;usage: shcode2exe.py [-h] [-o OUTPUT] [-s] [-a {32,64}] input&lt;/span&gt;

&lt;span class="go"&gt;Compile a binary shellcode blob into an exe file. Can target both 32bit or 64bit architecture.&lt;/span&gt;

&lt;span class="go"&gt;positional arguments:&lt;/span&gt;
&lt;span class="go"&gt;  input                 The input file containing the shellcode.&lt;/span&gt;

&lt;span class="go"&gt;optional arguments:&lt;/span&gt;
&lt;span class="go"&gt;  -h, --help            show this help message and exit&lt;/span&gt;
&lt;span class="go"&gt;  -o OUTPUT, --output OUTPUT&lt;/span&gt;
&lt;span class="go"&gt;                        Set output exe file.&lt;/span&gt;
&lt;span class="go"&gt;  -s, --string          Set if input file contains shellcode in string format.&lt;/span&gt;
&lt;span class="go"&gt;  -a {32,64}, --architecture {32,64}&lt;/span&gt;
&lt;span class="go"&gt;                        The windows architecture to use&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's how to load a file with shellcode in the format of a string&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;cat test.txt
&lt;span class="go"&gt;\x5e\x31\xc0\xb0\x24\xcd\x80\xb0\x24\xcd\x80\xb0\x58\xbb\xad\xde\xe1\xfe\xb9\x69\x19\x12\x28\xba\x67\x45\x23\x01\xcd\x80&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;./shcode2exe.py -s -o test-string.exe test.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Load a file with shellcode in the format of a blob&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./shcode2exe.py -o test-blob.exe test.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Use 64 bit architecture for the output (32 bit is the default)&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./shcode2exe.py -o test-blob.exe -a &lt;span class="m"&gt;64&lt;/span&gt; test.bin
&lt;span class="gp"&gt;$ &lt;/span&gt;file test-blob.exe
&lt;span class="go"&gt;test-blob.exe: PE32+ executable (console) x86-64 (stripped to external PDB), for MS Windows&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="next-steps"&gt;Next steps&lt;/h2&gt;
&lt;p&gt;I decided to reach out to the people behind Remnux to ask if they could consider my tool as a replacement on their platform. It would be great if they would, but it's okay too if they don't, I made it for my own use anyway. (Update 2021-02-07: It's now &lt;a href="https://github.com/REMnux/salt-states/issues/169"&gt;under review&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;For more information about the tool and it's code, go to &lt;a href="https://github.com/accidentalrebel/shcode2exe"&gt;it's Github page&lt;/a&gt;. If you have any comments or suggestions on how to improve it, feel free to tell me via Github issues or dm me at &lt;a href="https://twitter.com/accidentalrebel"&gt;@accidentalrebel&lt;/a&gt;.&lt;/p&gt;</content><category term="tools"></category><category term="re"></category><category term="tools"></category><category term="malware_analysis"></category></entry></feed>